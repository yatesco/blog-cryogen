<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://colinyates.co.uk' rel='self' type='application/rss+xml'/>
<title>
Random musings
</title>
<link>
http://colinyates.co.uk
</link>
<description>
Random musics of a confused mind
</description>
<lastBuildDate>
Thu, 06 Oct 2016 21:02:12 +0100
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-10-06-just-checking-in/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-10-06-just-checking-in/
</link>
<title>
Been a while
</title>
<description>
&lt;p&gt;So.... how have you all been? It has been a worryingly long time since I last saw you all ;-)&lt;/p&gt;&lt;p&gt;Life seems to be doing all it can to stop me blogging, so this is 'fly by' blog post to keep me in rhythm.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://www.seafile.com'&gt;seafile&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://www.seafile.com'&gt;seafile&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Wow, this is rocking my world big time - it is great. Disappointed there isn't a 'one-way sync TO the server' as that would replace my use of &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://www.plex.tv'&gt;plex&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://www.plex.tv'&gt;plex&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Where have you been all my life? Closely following seafile in 'things that make me smile', Plex is awesome for managing your media. Sort of :-) - CDs are a dream, rip them, and the magic of internet-accessible-tag-libraries will pull down cover art, organise them etc. &lt;/p&gt;&lt;p&gt;Doing the same for TV shows or DVDs....not so much. Rip a DVD to MKV format (google makemkv if you don't have a solution already) and it will produce a number of 'titleXX' files.&lt;/p&gt;&lt;p&gt;Import those into Plex (or any media file really) and all sorts of fun, insane and just wrong things will happen.&lt;/p&gt;&lt;p&gt;When you name the titles properly then again, it works like magic. Click on the file icon and you get a lovely full page view of the file, specials, extras etc. with full page cover art pulled from the internet.&lt;/p&gt;&lt;p&gt;I did this with my 'Lost' DVDs and when you click on one of them you get some lovely spooky music.&lt;/p&gt;&lt;p&gt;Very cool. But you have to work at it a bit.&lt;/p&gt;&lt;p&gt;And, if you have close to half a TB of (legally owned!) stuff, it can take a while to upload over Virgin's abysmally small upload speeds.&lt;/p&gt;&lt;p&gt;What else?....er...nope, that's it.&lt;/p&gt;&lt;p&gt;Oooh, actually, before you go - check out Plex's beta 'Cloud' &lt;a href='https://www.engadget.com/2016/09/26/plex-cloud-online-server/'&gt;offering&lt;/a&gt;. Can't wait for that to get out of beta.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 06 Oct 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-29-pydio-seafile/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-29-pydio-seafile/
</link>
<title>
Secure file sharing in the cloud
</title>
<description>
&lt;p&gt;We occasionally need to share sensitive files with our clients: new deployment bundles, test data etc. Due to the sensitive nature of our work we &lt;i&gt;must&lt;/i&gt; have the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;strong usernames/passwords&lt;/li&gt;&lt;li&gt;no client installation so a decent web UI is necessary&lt;/li&gt;&lt;li&gt;encryption in transit and at rest&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And as I will be administering it, it must also:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;be trivial to install and upgrade&lt;/li&gt;&lt;li&gt;not break when you upgrade the OS&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As this is an experiment I want to self-host (as that increases security somewhat) and all the hosted options I have looked at are either too expensive or too cumbersome.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;pydio&quot;&gt;&lt;/a&gt;Pydio&lt;/h2&gt;&lt;p&gt;For a while I used &lt;a href='https://pydio.com'&gt;pydio&lt;/a&gt; and it was fine. Installation was tricky (although it has gotten much better recently) but once it was working it was pretty solid.&lt;/p&gt;&lt;p&gt;It did the following very well:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a good Linux citizen, config files in the right places for the distribution&lt;/li&gt;&lt;li&gt;very rounded web UI&lt;/li&gt;&lt;li&gt;all the files are stored 'as-is' so last-resort backup is as simple as rsync&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The major downsides however:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;everything is stored under www-data and permissions are at the application level&lt;/li&gt;&lt;li&gt;upgrading Ubuntu to the latest LTS broke it horribly, probably because PHP changed significantly&lt;/li&gt;&lt;li&gt;sharing between clients never seemed to work properly so we had to copy the same release artifacts between accounts&lt;/li&gt;&lt;li&gt;the pydio admin would need to issue a username and password which the client never bothered to change&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;However, other than those issues (which are all well documented) pydio was fine for sharing via the web.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;seafile&quot;&gt;&lt;/a&gt;Seafile&lt;/h2&gt;&lt;p&gt;I noticed &lt;a href='https://www.seafile.com/en/home/'&gt;seafile&lt;/a&gt; when I was first evaluating solutions a while ago. It seemed more focused at file sharing/synchronising than cloud sharing so I dismissed it. However, it seems to have matured nicely and offers a lot out of the box:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;everything is a &lt;a href='https://www.seafile.com/en/help/libraries/'&gt;library&lt;/a&gt; which you can share with others&lt;/li&gt;&lt;li&gt;libraries can be &lt;a href='https://www.seafile.com/en/help/encrypted_libraries/'&gt;encrypted&lt;/a&gt; (although there are serious concerns over its encryption)&lt;/li&gt;&lt;li&gt;users were invited with an email and password which they were forced to change&lt;/li&gt;&lt;li&gt;uploads and downloads could be done with &lt;a href='https://www.seafile.com/en/help/share/'&gt;security-by-obfuscation&lt;/a&gt; URLs which could be password protected and expired&lt;/li&gt;&lt;li&gt;their &lt;a href='https://www.seafile.com/en/help/install/'&gt;desktop client&lt;/a&gt; allows you to sync locally or browse remotely on a library by library basis&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The installation was a peach, the simplest (backup) non-trivial software I have ever installed. It was literally get a fresh debian/ubuntu machine and then run the &lt;a href='https://github.com/seafile/seafile-server-installer'&gt;installation script.&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;After that it was a case of regenerating the SSL and installing it by editing (on debian at least) &lt;code&gt;/etc/nginx/conf.d/seafile.conf&lt;/code&gt; to point to the key and the crt:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;server {
  listen       80;
  server&amp;#95;name  &amp;quot;&amp;quot;;
  return 301 https://$http&amp;#95;host$request&amp;#95;uri;
}

server {
  listen 443;
  server&amp;#95;name  &amp;quot;&amp;quot;;

### START - THIS IS WHAT YOU NEED TO CHANGE ###
  ssl on;
  ssl&amp;#95;certificate /etc/ssl/certs/&amp;lt;YOUR-SERVER&amp;gt;&amp;#95;bundle.crt; # /etc/nginx/ssl/seafile.crt;
  ssl&amp;#95;certificate&amp;#95;key /etc/ssl/private/&amp;lt;YOUR-SERVER&amp;gt;.key; # /etc/nginx/ssl/seafile.key;
### END - THIS IS WHAT YOU NEED TO CHANGE ###

  proxy&amp;#95;set&amp;#95;header X-Forwarded-For $remote&amp;#95;addr;

  location / {
    fastcgi&amp;#95;pass    127.0.0.1:8000;
    fastcgi&amp;#95;param   SCRIPT&amp;#95;FILENAME     $document&amp;#95;root$fastcgi&amp;#95;script&amp;#95;name;
    fastcgi&amp;#95;param   PATH&amp;#95;INFO           $fastcgi&amp;#95;script&amp;#95;name;
    fastcgi&amp;#95;param   SERVER&amp;#95;PROTOCOL     $server&amp;#95;protocol;
    fastcgi&amp;#95;param   QUERY&amp;#95;STRING        $query&amp;#95;string;
    fastcgi&amp;#95;param   REQUEST&amp;#95;METHOD      $request&amp;#95;method;
    fastcgi&amp;#95;param   CONTENT&amp;#95;TYPE        $content&amp;#95;type;
    fastcgi&amp;#95;param   CONTENT&amp;#95;LENGTH      $content&amp;#95;length;
    fastcgi&amp;#95;param   SERVER&amp;#95;ADDR         $server&amp;#95;addr;
    fastcgi&amp;#95;param   SERVER&amp;#95;PORT         $server&amp;#95;port;
    fastcgi&amp;#95;param   SERVER&amp;#95;NAME         $server&amp;#95;name;
    fastcgi&amp;#95;param   REMOTE&amp;#95;ADDR         $remote&amp;#95;addr;
    fastcgi&amp;#95;param   HTTPS               on;
    fastcgi&amp;#95;param   HTTP&amp;#95;SCHEME         https;
    access&amp;#95;log      /var/log/nginx/seahub.access.log;
    error&amp;#95;log       /var/log/nginx/seahub.error.log;
  }

  location /seafhttp {
    rewrite &amp;#94;/seafhttp&amp;#40;.&amp;#42;&amp;#41;$ $1 break;
    proxy&amp;#95;pass http://127.0.0.1:8082;
    client&amp;#95;max&amp;#95;body&amp;#95;size 0;
    proxy&amp;#95;connect&amp;#95;timeout  36000s;
    proxy&amp;#95;read&amp;#95;timeout  36000s;
    proxy&amp;#95;send&amp;#95;timeout  36000s;
  }

  location /media {
    root /opt/seafile/seafile-server-latest/seahub;
  }

  location /seafdav {
    fastcgi&amp;#95;pass    127.0.0.1:8080;
    fastcgi&amp;#95;param   SCRIPT&amp;#95;FILENAME     $document&amp;#95;root$fastcgi&amp;#95;script&amp;#95;name;
    fastcgi&amp;#95;param   PATH&amp;#95;INFO           $fastcgi&amp;#95;script&amp;#95;name;
    fastcgi&amp;#95;param   SERVER&amp;#95;PROTOCOL     $server&amp;#95;protocol;
    fastcgi&amp;#95;param   QUERY&amp;#95;STRING        $query&amp;#95;string;
    fastcgi&amp;#95;param   REQUEST&amp;#95;METHOD      $request&amp;#95;method;
    fastcgi&amp;#95;param   CONTENT&amp;#95;TYPE        $content&amp;#95;type;
    fastcgi&amp;#95;param   CONTENT&amp;#95;LENGTH      $content&amp;#95;length;
    fastcgi&amp;#95;param   SERVER&amp;#95;ADDR         $server&amp;#95;addr;
    fastcgi&amp;#95;param   SERVER&amp;#95;PORT         $server&amp;#95;port;
    fastcgi&amp;#95;param   SERVER&amp;#95;NAME         $server&amp;#95;name;
    fastcgi&amp;#95;param   REMOTE&amp;#95;ADDR         $remote&amp;#95;addr;
    fastcgi&amp;#95;param   HTTPS               on;
    client&amp;#95;max&amp;#95;body&amp;#95;size 0;
    access&amp;#95;log      /var/log/nginx/seafdav.access.log;
    error&amp;#95;log       /var/log/nginx/seafdav.error.log;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We had to use the 'bundle' crt because godaddy's SSLs signing authority isn't always recognised so the crt is actually the result of:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bash
cat &amp;lt;YOUR-SERVER&amp;gt;.crt gd&amp;#95;bundle.crt &amp;gt; &amp;lt;YOU-SERVER&amp;gt;&amp;#95;bundle.crt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a few days usage I am very impressed. The web UI isn't great but it all seems to be very solid and reliable.&lt;/p&gt;&lt;p&gt;And wow, does it sync quickly! It uses &lt;a href='https://en.wikipedia.org/wiki/DeltaSync'&gt;delta syncing&lt;/a&gt; but the initial upload was really quick as well.&lt;/p&gt;&lt;p&gt;It also has a huge feature, which is sorely missing in a lot of these cloud servers, which is you can browser a library from your desktop client without it syncing, so it isn't going to overwhelm the pitifully small SSDs most laptops come with these days.&lt;/p&gt;&lt;p&gt;So yes, all in all, very pleased with it.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 29 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-29-prismatic-schema/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-29-prismatic-schema/
</link>
<title>
Deprecated warnings from plumatic schema
</title>
<description>
&lt;p&gt;If you aren't already using &lt;a href='https://github.com/plumatic/schema'&gt;plumatic's schema&lt;/a&gt; then I &lt;strong&gt;strongly&lt;/strong&gt; recommend you do.&lt;/p&gt;&lt;p&gt;&lt;i&gt;(when did they stop being 'Prismatic' and become 'Plumatic'? Oh well)&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The reason why will have to be another blog post, this is simply to say that is you are using &lt;code&gt;both&lt;/code&gt; or &lt;code&gt;either&lt;/code&gt; then you will get a bunch of &lt;code&gt;deprecated&lt;/code&gt; warnings.&lt;/p&gt;&lt;p&gt;The simple, not really thinking about it solution is to use &lt;code&gt;constrained&lt;/code&gt; instead of &lt;code&gt;both&lt;/code&gt; and &lt;code&gt;conditional&lt;/code&gt; instead of &lt;code&gt;either&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Examples:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;s/both &amp;#91;s/Int&amp;#93; &amp;#40;s/pred seq&amp;#41;&amp;#41;
=&amp;gt;
&amp;#40;s/constrained seq &amp;#91;s/Int&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;and&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;def ToggleA {:toggle &amp;#40;s/eq :a&amp;#41; :value s/Int}&amp;#41;
&amp;#40;def ToggleB {:toggle &amp;#40;s/eq :b&amp;#41; :other-field s/Int}&amp;#41;
&amp;#40;s/either ToggleA ToggleB&amp;#41;
=&amp;gt;
&amp;#40;s/conditional #&amp;#40;= :a &amp;#40;:toggle %&amp;#41;&amp;#41; ToggleA #&amp;#40;= :b &amp;#40;:toggle %&amp;#41;&amp;#41; ToggleB&amp;#41;
=&amp;gt;
&amp;#40;s/conditional #&amp;#40;= :a &amp;#40;:toggle %&amp;#41;&amp;#41; ToggleA :else ToggleB&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hope that helps.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 29 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-29-circleci-phantomjs/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-29-circleci-phantomjs/
</link>
<title>
Circleci, phantomjs
</title>
<description>
&lt;p&gt;Another quick tip.&lt;/p&gt;&lt;p&gt;I use the excellent &lt;a href='https://github.com/emezeske/lein-cljsbuild'&gt;cljsbuild&lt;/a&gt; to compile and test our ClojureScript projects (and I can't believe how difficult it is to wire this stuff together in 2016!). To support continuous integration I use &lt;a href='http://phantomjs.org'&gt;phantomjs&lt;/a&gt; to provide the JavaScript environment.&lt;/p&gt;&lt;p&gt;Unfortunately circleci's environment doesn't have &lt;code&gt;phantomjs&lt;/code&gt; v2 available to it and v1 has some troubling properties. It turns out, after much googling and dead ends, that it is pretty trivial to get &lt;code&gt;phantomjs&lt;/code&gt; in your circleci environment, simply add:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;machine:
  pre:
    - sudo curl --output /usr/local/bin/phantomjs https://s3.amazonaws.com/circle-downloads/phantomjs-2.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to your &lt;code&gt;circle.yml&lt;/code&gt; - thanks &lt;a href='https://discuss.circleci.com/t/add-phantomjs-2-1-1-to-the-platform/1755/3'&gt;kimh@circleci&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;lein-cljsbuild&quot;&gt;&lt;/a&gt;lein-cljsbuild&lt;/h2&gt;&lt;p&gt;The documentation on &lt;a href='https://github.com/emezeske/lein-cljsbuild/blob/master/doc/TESTING.md'&gt;github&lt;/a&gt; is sufficient and the &lt;a href='https://github.com/emezeske/lein-cljsbuild/tree/master/example-projects/advanced'&gt;advanced project&lt;/a&gt; contains all you need.&lt;/p&gt;&lt;p&gt;However, in brief (and note, this isn't exactly the same as the advanced project):&lt;/p&gt;&lt;p&gt;&lt;code&gt;project.clj&lt;/code&gt;:&lt;pre&gt;&lt;code&gt;&amp;#40;defproject &amp;lt;YOUR-COMPANY&amp;gt;/&amp;lt;YOUR-COMPANY&amp;gt;.util &amp;quot;0.4.1-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url  &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;org.clojure/clojurescript &amp;quot;1.9.216&amp;quot;&amp;#93;
                 &amp;#91;org.clojure/tools.logging &amp;quot;0.3.1&amp;quot;&amp;#93;
                 &amp;#91;ch.qos.logback/logback-classic &amp;quot;1.1.7&amp;quot;&amp;#93;
                 &amp;#91;net.sourceforge.jtds/jtds &amp;quot;1.3.1&amp;quot;&amp;#93;
                 &amp;#91;com.mchange/c3p0 &amp;quot;0.9.5.2&amp;quot;&amp;#93;
                 &amp;#91;environ &amp;quot;1.1.0&amp;quot;&amp;#93;
                 &amp;#91;com.lucasbradstreet/instaparse-cljs &amp;quot;1.4.1.2&amp;quot;&amp;#93;
                 &amp;#91;prismatic/schema &amp;quot;1.1.3&amp;quot;&amp;#93;
                 &amp;#91;org.clojure/java.jdbc &amp;quot;0.4.2&amp;quot;&amp;#93;
                 &amp;#91;clj-time &amp;quot;0.12.0&amp;quot;&amp;#93;
                 &amp;#91;com.andrewmcveigh/cljs-time &amp;quot;0.4.0&amp;quot;&amp;#93;&amp;#93;

  :plugins &amp;#91;&amp;#91;lein-environ &amp;quot;1.1.0&amp;quot;&amp;#93;
            &amp;#91;lein-wagon-ssh-external &amp;quot;0.1.0&amp;quot;&amp;#93;
            &amp;#91;lein-cljsbuild &amp;quot;1.1.4&amp;quot;&amp;#93;&amp;#93;

  :cljsbuild {:test-commands
              {&amp;quot;unit&amp;quot; &amp;#91;&amp;quot;phantomjs&amp;quot;
                       &amp;quot;phantom/unit-test.js&amp;quot;
                       &amp;quot;resources/private/html/unit-test.html&amp;quot;&amp;#93;}
              :builds {
                       :prod
                       {:source-paths &amp;#91;&amp;quot;src&amp;quot;&amp;#93;
                        :compiler     {:output-to     &amp;quot;resources/public/js/main.js&amp;quot;
                                       :optimizations :advanced
                                       :pretty-print  false}}
                       :test
                       {:source-paths &amp;#91;&amp;quot;src&amp;quot; &amp;quot;test&amp;quot; &amp;quot;test-cljs&amp;quot;&amp;#93;
                        :compiler     {:output-to     &amp;quot;resources/private/js/unit-test.js&amp;quot;
                                       :optimizations :advanced
                                       :pretty-print  false}}}}
  ; Clean JS directories
  :clean-targets &amp;#94;{:protect false} &amp;#91;&amp;quot;resources/private/js&amp;quot;
                                    &amp;quot;resources/public/js&amp;quot;
                                    :target-path&amp;#93;

  :aliases {&amp;quot;clj-tests!&amp;quot;           &amp;#91;&amp;quot;do&amp;quot; &amp;quot;test&amp;quot;&amp;#93;
            &amp;quot;cljs-tests!&amp;quot;          &amp;#91;&amp;quot;do&amp;quot; &amp;#91;&amp;quot;cljsbuild&amp;quot; &amp;quot;test&amp;quot;&amp;#93;&amp;#93;
            &amp;quot;all-tests!&amp;quot;           &amp;#91;&amp;quot;do&amp;quot; &amp;quot;clj-tests!,&amp;quot; &amp;quot;cljs-tests!&amp;quot;&amp;#93;
            &amp;quot;full-build-no-tests!&amp;quot; &amp;#91;&amp;quot;do&amp;quot; &amp;quot;clean&amp;quot;&amp;#93;
            &amp;quot;full-build-cljs!&amp;quot;     &amp;#91;&amp;quot;do&amp;quot; &amp;quot;clean,&amp;quot; &amp;quot;cljs-tests!&amp;quot;&amp;#93;
            &amp;quot;full-build!&amp;quot;          &amp;#91;&amp;quot;do&amp;quot; &amp;quot;clean,&amp;quot; &amp;quot;all-tests!&amp;quot;&amp;#93;
            ;; TODO - circleci cannot access a MS SQL database so run as many tests as we can
            &amp;quot;deploy!&amp;quot;              &amp;#91;&amp;quot;do&amp;quot; &amp;quot;full-build-cljs!&amp;quot;&amp;#93;}&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;phantom/unit-test.js&lt;/code&gt;:&lt;pre&gt;&lt;code&gt;var system = require&amp;#40;'system'&amp;#41;;
var url,args;

if &amp;#40;phantom.version.major &amp;gt; 1&amp;#41; {
    args = system.args;
    if &amp;#40;args.length &amp;lt; 2&amp;#41; {
        system.stderr.write&amp;#40;'Expected a target URL parameter.'&amp;#41;;
        phantom.exit&amp;#40;1&amp;#41;;
    }
    url = args&amp;#91;1&amp;#93;;
} else {
    args = phantom.args;
    if &amp;#40;args.length &amp;lt; 1&amp;#41; {
        system.stderr.write&amp;#40;'Expected a target URL parameter.'&amp;#41;;
        phantom.exit&amp;#40;1&amp;#41;;
    }
    url = args&amp;#91;0&amp;#93;;
}

var page = require&amp;#40;'webpage'&amp;#41;.create&amp;#40;&amp;#41;;

page.onConsoleMessage = function &amp;#40;message&amp;#41; {
    console.log&amp;#40;&amp;quot;Test console: &amp;quot; + message&amp;#41;;
};

console.log&amp;#40;&amp;quot;Loading URL: &amp;quot; + url&amp;#41;;

page.open&amp;#40;url, function &amp;#40;status&amp;#41; {
    if &amp;#40;status !== &amp;quot;success&amp;quot;&amp;#41; {
        console.log&amp;#40;'Failed to open ' + url&amp;#41;;
        setTimeout&amp;#40;function&amp;#40;&amp;#41; { // https://github.com/ariya/phantomjs/issues/12697
            phantom.exit&amp;#40;1&amp;#41;;
        }, 0&amp;#41;;
    }

    page.evaluate&amp;#40;function&amp;#40;&amp;#41; {
        &amp;lt;YOUR-COMPANY&amp;gt;.util.test.run&amp;#40;&amp;#41;;
    }&amp;#41;;

    setTimeout&amp;#40;function&amp;#40;&amp;#41; { // https://github.com/ariya/phantomjs/issues/12697
        phantom.exit&amp;#40;0&amp;#41;;
    }, 0&amp;#41;;
}&amp;#41;;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;test-cljs/&amp;lt;YOUR-COMPANY&amp;gt;.util.test&lt;/code&gt;:&lt;pre&gt;&lt;code&gt;&amp;#40;ns &amp;lt;YOUR-COMPANY&amp;gt;.util.test
  &amp;#40;:require &amp;#91;clojure.test :as t&amp;#93;
            &amp;#91;&amp;lt;YOUR-COMPANY&amp;gt;.util.common-test&amp;#93;
            &amp;#91;&amp;lt;YOUR-COMPANY&amp;gt;.util.hierarchy-test&amp;#93;
            &amp;#91;&amp;lt;YOUR-COMPANY&amp;gt;.util.parser.time-test&amp;#93;&amp;#41;&amp;#41;

&amp;#40;enable-console-print!&amp;#41;

&amp;#40;defn &amp;#94;:export run &amp;#91;&amp;#93;
  &amp;#40;.log js/console &amp;quot;Testing &amp;lt;YOUR-COMPANY&amp;gt;.util&amp;quot;&amp;#41;
  &amp;#40;t/run-all-tests #&amp;quot;&amp;lt;YOUR-COMPANY&amp;gt;.util.&amp;#42;-test&amp;quot;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 29 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-28-projectile-killing/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-28-projectile-killing/
</link>
<title>
Killing a projectile project
</title>
<description>
&lt;p&gt;&lt;a href='https://github.com/bbatsov/projectile'&gt;Projectile&lt;/a&gt; is an excellent library for managing 'projects' (where a project is typically a git repository).&lt;/p&gt;&lt;p&gt;Today I found a new tip - &lt;code&gt;projectile-kill-buffers&lt;/code&gt; which effectively removes the project from your current emacs session:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;man&quot;&gt;projectile-kill-buffers is an interactive autoloaded compiled Lisp function in
‘projectile.el’.

It is bound to SPC p k, M-m p k, C-c p k, &amp;lt;menu-bar&amp;gt; &amp;lt;tools&amp;gt; &amp;lt;Projectile&amp;gt; &amp;lt;Kill
project buffers&amp;gt;.

&amp;#40;projectile-kill-buffers&amp;#41;

Kill all project buffers.

&amp;#91;back&amp;#93;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is really useful if you are toggling between multiple projects and want to finish working on one of the projects. Simply visit a buffer with a file in that project and &lt;code&gt;SPC p k&lt;/code&gt;, confirm and all of the buffers related to that project disappear.&lt;/p&gt;&lt;p&gt;NOTE: it doesn't actually remove the project from emacs's session as you can still &lt;code&gt;SPC p p&lt;/code&gt; (&lt;code&gt;helm-projectile-switch-project&lt;/code&gt;) to the project.&lt;/p&gt;&lt;p&gt;That's all for now folks.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 28 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-28-git-tagging-project/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-28-git-tagging-project/
</link>
<title>
Git tagging your builds automatically
</title>
<description>
&lt;p&gt;I need to write a much longer post to explain my thoughts on 'versioning' and what constitutes a release with today's trends of continuous integration, but for now, a simple tip.&lt;/p&gt;&lt;p&gt;I wanted a way to distinguish each &lt;i&gt;build&lt;/i&gt;, not each &lt;i&gt;release&lt;/i&gt; but each &lt;i&gt;build&lt;/i&gt;. There is one excellent source of truth for that which is your git repository.&lt;/p&gt;&lt;p&gt;Wouldn't it be great if each build contained a full git log of what went into it?.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;magic&quot;&gt;&lt;/a&gt;The magic&lt;/h2&gt;&lt;p&gt;We use &lt;a href='circleci.com'&gt;circleci&lt;/a&gt; (but it would be trivial to do with any decent continuous integration server) and before building we simply execute &lt;code&gt;git log &amp;ndash;oneline &amp;ndash;decorate &amp;ndash;graph &amp;gt; resources/public/glog.txt&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;machine:
  java:
    version: oraclejdk8

## Customize dependencies
dependencies:
  cache&amp;#95;directories:
    - &amp;quot;&amp;#126;/.m2&amp;quot;
  pre:
    - git fetch --tags

test:
  override:
    - git log --oneline --decorate --graph &amp;gt; resources/public/glog.txt
    - lein full-build-no-tests!
    - mkdir -p $CIRCLE&amp;#95;TEST&amp;#95;REPORTS/junit/
    - find . -type f -regex &amp;quot;.&amp;#42;/target/test-reports/.&amp;#42;xml&amp;quot; -exec cp {} $CIRCLE&amp;#95;TEST&amp;#95;REPORTS/junit/ \;
    - cp target/&amp;#42;.war $CIRCLE&amp;#95;ARTIFACTS

# this doesn't work so commented out
# in favour of an explicit `cp` in the test: post: stage
#general:
#  artifacts:
#    - &amp;quot;target/&amp;#42;.war&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i&gt;(&lt;code&gt;resources\public&lt;/code&gt; is exposed from the root of the &lt;code&gt;lein war&lt;/code&gt; &lt;code&gt;WAR&lt;/code&gt; file)&lt;/i&gt;&lt;/p&gt;&lt;p&gt;This is of course only one way of doing it, but it was the 'Simplest Thing That Can Possibly Work'. And sure, it corrupts the working directory because &lt;code&gt;resources\public&lt;/code&gt; is under git version control, but it doesn't matter because &lt;code&gt;circleci&lt;/code&gt; containers are disregarded after every build.&lt;/p&gt;&lt;p&gt;That's all for now - why not enjoy some &lt;a href='https://www.youtube.com/watch?v=RUX2-N8cVMc'&gt;light entertainment :-)&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 28 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-27-lessons-learned/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-27-lessons-learned/
</link>
<title>
Lessons learned from Java and Clojure
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;a&amp;#95;hard&amp;#95;day&quot;&gt;&lt;/a&gt;A hard day&lt;/h2&gt;&lt;p&gt;I learned the following lessons today:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Simplest is best&lt;/li&gt;&lt;li&gt;Evaluate your assumptions&lt;/li&gt;&lt;li&gt;Sometimes development is just &lt;i&gt;hard&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In a nutshell, our production app records UI errors and submits them to the server where they are pushed to the &lt;code&gt;error-handler&lt;/code&gt;. Similarly, if an Exception is raised server side it is also pushed to the &lt;code&gt;error-handler&lt;/code&gt;. However, the errors that had been captured were all ridiculously long stack traces with no references to any of my code.&lt;/p&gt;&lt;p&gt;It was clear that rendering (either printing out or serialising to EDN) was causing something to blow its stack, however the call-site just wasn't there!&lt;/p&gt;&lt;p&gt;The top of the stack trace:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;java.lang.StackOverflowError: null
 at java.util.regex.Pattern$GroupHead.match&amp;#40;Pattern.java:4658&amp;#41;
 at java.util.regex.Pattern$Branch.match&amp;#40;Pattern.java:4604&amp;#41;
 at java.util.regex.Pattern$Branch.match&amp;#40;Pattern.java:4602&amp;#41;
 at java.util.regex.Pattern$BranchConn.match&amp;#40;Pattern.java:4568&amp;#41;
 at java.util.regex.Pattern$GroupTail.match&amp;#40;Pattern.java:4717&amp;#41;
 at java.util.regex.Pattern$Curly.match0&amp;#40;Pattern.java:4279&amp;#41;
 at java.util.regex.Pattern$Curly.match&amp;#40;Pattern.java:4234&amp;#41;
 at java.util.regex.Pattern$GroupHead.match&amp;#40;Pattern.java:4658&amp;#41;
 at java.util.regex.Pattern$Branch.match&amp;#40;Pattern.java:4604&amp;#41;
 at java.util.regex.Pattern$Branch.match&amp;#40;Pattern.java:4602&amp;#41;
 at java.util.regex.Pattern$BmpCharProperty.match&amp;#40;Pattern.java:3798&amp;#41;
 at java.util.regex.Pattern$Start.match&amp;#40;Pattern.java:3461&amp;#41;
 at java.util.regex.Matcher.search&amp;#40;Matcher.java:1248&amp;#41;
 at java.util.regex.Matcher.find&amp;#40;Matcher.java:664&amp;#41;
 at java.util.Formatter.parse&amp;#40;Formatter.java:2549&amp;#41;
 at java.util.Formatter.format&amp;#40;Formatter.java:2501&amp;#41;
 at java.util.Formatter.format&amp;#40;Formatter.java:2455&amp;#41;
 at java.lang.String.format&amp;#40;String.java:2940&amp;#41;
 at clojure.core$format.invokeStatic&amp;#40;core.clj:5533&amp;#41;
 at clojure.core$print&amp;#95;tagged&amp;#95;object.invokeStatic&amp;#40;core&amp;#95;print.clj:106&amp;#41;
 at clojure.core$print&amp;#95;object.invokeStatic&amp;#40;core&amp;#95;print.clj:110&amp;#41;
 at clojure.core$fn&amp;#95;&amp;#95;6044.invokeStatic&amp;#40;core&amp;#95;print.clj:113&amp;#41;
 at clojure.core$fn&amp;#95;&amp;#95;6044.invoke&amp;#40;core&amp;#95;print.clj:113&amp;#41;
 at clojure.lang.MultiFn.invoke&amp;#40;MultiFn.java:233&amp;#41;
 at clojure.core$pr&amp;#95;on.invokeStatic&amp;#40;core.clj:3572&amp;#41;
 at clojure.core$pr&amp;#95;on.invoke&amp;#40;core.clj:3566&amp;#41;
 at clojure.core$print&amp;#95;map$fn&amp;#95;&amp;#95;6094.invoke&amp;#40;core&amp;#95;print.clj:212&amp;#41;
 at clojure.core$print&amp;#95;sequential.invokeStatic&amp;#40;core&amp;#95;print.clj:59&amp;#41;
 at clojure.core$print&amp;#95;map.invokeStatic&amp;#40;core&amp;#95;print.clj:208&amp;#41;
 at clojure.core$fn&amp;#95;&amp;#95;6097.invokeStatic&amp;#40;core&amp;#95;print.clj:217&amp;#41;
 at clojure.core$fn&amp;#95;&amp;#95;6097.invoke&amp;#40;core&amp;#95;print.clj:217&amp;#41;
 at clojure.lang.MultiFn.invoke&amp;#40;MultiFn.java:233&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(&lt;i&gt;spot the repetition?&lt;/i&gt;)&lt;/p&gt;&lt;p&gt;The bottom of the stack trace:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; at clojure.core$pr.invoke&amp;#40;core.clj:3575&amp;#41;
 at clojure.lang.AFn.applyToHelper&amp;#40;AFn.java:154&amp;#41;
 at clojure.lang.RestFn.applyTo&amp;#40;RestFn.java:132&amp;#41;
 at clojure.core$apply.invokeStatic&amp;#40;core.clj:646&amp;#41;
 at clojure.core$pr&amp;#95;str.invokeStatic&amp;#40;core.clj:4580&amp;#41;
 at clojure.core$pr&amp;#95;str.doInvoke&amp;#40;core.clj:4580&amp;#41;
 at clojure.lang.RestFn.invoke&amp;#40;RestFn.java:408&amp;#41;
 at cider.nrepl.print&amp;#95;method$eval53163$fn&amp;#95;&amp;#95;53164.invoke&amp;#40;print&amp;#95;method.clj:35&amp;#41;
 at clojure.lang.MultiFn.invoke&amp;#40;MultiFn.java:233&amp;#41;
 at
...
&lt;/code&gt;&lt;/pre&gt;NOTE: that ellipsis is actually in the stack trace itself, which is a big clue that it isn't complete.&lt;p&gt;Like all good engineers, after some navel gazing and talking to the duck I decided to call for &lt;a href='https://groups.google.com/d/topic/clojure/H4s5a6enftA/discussion'&gt;help&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The great part was that I couldn't reproduce it locally....except I remember in the dim and distant past I saw a very similar stack trace when deploying the application with &lt;code&gt;DEBUG&lt;/code&gt; logging. I recall that it was wrapped up with the excellent &lt;a href='https://github.com/stuartsierra/component'&gt;component&lt;/a&gt; library, specifically during instantiation.&lt;/p&gt;&lt;p&gt;So, two different effects, onto the cause...&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;a&amp;#95;minor&amp;#95;diversion&quot;&gt;&lt;/a&gt;A minor diversion&lt;/h3&gt;&lt;p&gt;I had been meaning to rethink the &lt;code&gt;component&lt;/code&gt; library due to two major pain-points:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;if a component crashes then it typically kills your system so a &lt;code&gt;&amp;#40;reset&amp;#41;&lt;/code&gt; is necessary&lt;/li&gt;&lt;li&gt;sometimes &lt;code&gt;&amp;#40;reset&amp;#41;&lt;/code&gt; doesn't work, particularly if you have &lt;code&gt;protocols&lt;/code&gt; hanging around&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And a third minor point - I felt that the component library wasn't great when you had sub-systems. Ideally I would want to include my sub-system component (map) into an outer map but there was no support for nesting. The best you could do was lexical scoping, e.g. &lt;code&gt;{:inner/a ....}&lt;/code&gt; which would be referenced by the outer system map.&lt;/p&gt;&lt;p&gt;And for completeness, I didn't actually have that much state but I did have an awful lot of &lt;code&gt;services&lt;/code&gt;, each of which was defined as a record.&lt;/p&gt;&lt;p&gt;Ultimately, I decided that a simply &lt;code&gt;start&lt;/code&gt; method which explicitly started the system in the correct order was sufficient.&lt;/p&gt;&lt;p&gt;A few hours hackery later and there was no sign of the &lt;code&gt;component&lt;/code&gt; library, and instead of 100s of lines of boilerplate spread out of a number of &lt;code&gt;.system.clj&lt;/code&gt; files I had a single &lt;code&gt;system.clj&lt;/code&gt; file complete with type safe dependency injection.&lt;/p&gt;&lt;p&gt;I was very pleasantly surprised at how much complexity it removed - the most dangerous sort of complexity that sneaks in sideways so it never feels painful at any one time, but looking at the system as a whole you realise how much complexity there is.&lt;/p&gt;&lt;p&gt;Oh, and &lt;code&gt;&amp;#40;reset&amp;#41;&lt;/code&gt; works fine now and if one of the services fails then no-worries, it all just works :-).&lt;/p&gt;&lt;p&gt;Anyway, back to the cause of the humongous stack trace.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;stack&amp;#95;traces&quot;&gt;&lt;/a&gt;Stack traces&lt;/h2&gt;&lt;p&gt;At first I was stumped as to what could be causing it. Thanks to two very friendly fellow Clojure devs I realised that actually what I was seeing was an incomplete picture, specifically I wasn't seeing the entire &lt;i&gt;depth&lt;/i&gt; of the tree (thanks Ragnar Dahlen).&lt;/p&gt;&lt;p&gt;And indeed, Java has a &lt;code&gt;MaxJavaStackTraceDepth&lt;/code&gt; property which dictates how many stack frames to include in a stack trace and is set to 1024 by default.&lt;/p&gt;&lt;p&gt;Unfortunately setting this to a larger value, or actually &lt;code&gt;-1&lt;/code&gt; which disables the threshold didn't make any difference. Mainly because I couldn't reproduce it in the first place! But even if it did I wouldn't have been satisfied - it was simply pushing the problem further away, not removing it.&lt;/p&gt;&lt;p&gt;Thinking it through a bit more I realised that the &lt;code&gt;error-handler&lt;/code&gt; serialises the entire state of the system and reports that alongside the error. Now, this &lt;i&gt;should&lt;/i&gt; be safe to do so as there is very little cached on the server. However, the UI &lt;code&gt;error-handler&lt;/code&gt; pushes its state to the server, and the UI state can be potentially huge...&lt;/p&gt;&lt;p&gt;So, a similar stack trace when serialising huge data structures in the &lt;code&gt;error-handler&lt;/code&gt; and a huge stack trace when starting the &lt;code&gt;component system&lt;/code&gt;. I see a theme....&lt;/p&gt;&lt;p&gt;And yep, tracing through the (now discarded) &lt;code&gt;component tree&lt;/code&gt; I could see that in &lt;code&gt;DEBUG&lt;/code&gt; mode I am mindlessly printing out something that could be unbounded.&lt;/p&gt;&lt;p&gt;The actual part of the code, if you are still reading :-), was in the &lt;code&gt;message handler&lt;/code&gt; which contains a list of 'message handlers.' The &lt;code&gt;message handler&lt;/code&gt; expects the handlers to be:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defprotocol IHandleMessages
  &amp;#40;id &amp;#91;this&amp;#93;&amp;#41;
  &amp;#40;can-handle? &amp;#91;this message&amp;#93;&amp;#41;
  &amp;#40;handle-message &amp;#91;this message opts&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and when a &lt;code&gt;handler&lt;/code&gt; was registered the &lt;code&gt;message handler&lt;/code&gt; would &lt;code&gt;DEBUG&lt;/code&gt; the &lt;code&gt;handler&lt;/code&gt;. Changing that &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;&amp;#40;api/id handler&amp;#41;&lt;/code&gt; should be sufficient.&lt;/p&gt;&lt;p&gt;Again though, without being able to reproduce this it was all just a best-guess.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;on&amp;#95;a&amp;#95;better&amp;#95;note&quot;&gt;&lt;/a&gt;On a better note&lt;/h2&gt;&lt;p&gt;&lt;a href='http://spacemacs.org'&gt;Spacemacs'&lt;/a&gt; ability to convert the result of a &lt;code&gt;helm grep&lt;/code&gt; into an editable buffer which you can then edit made removing the many &lt;code&gt;&amp;#91;com.stuartsierra.component :as component&amp;#93;&lt;/code&gt; trivial :-). Gotta love spacemacs and &lt;a href='https://tuhdo.github.io/helm-intro.html'&gt;helm&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Oh, and &lt;a href='https://cursive-ide.com'&gt;Cursive&lt;/a&gt;'s excellent 'unused' code detection is worth its weight in gold.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So what have I learnt?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;sometimes you don't need to follow the herd, and even simple libraries can cause incidental complexity&lt;/li&gt;&lt;li&gt;if you are seeing a nonsensical stack trace then no, Clojure isn't stupid, something else is getting involved&lt;/li&gt;&lt;li&gt;not being able to reproduce a problem in production is terrifying&lt;/li&gt;&lt;li&gt;consider whether your collaborator can be unbounded before mindlessly rendering it to the console or EDN&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I wonder what joys tomorrow will bring...&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 27 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-25-hello-again/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-25-hello-again/
</link>
<title>
Blogging, the sequel!
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;a&amp;#95;fresh&amp;#95;start&quot;&gt;&lt;/a&gt;A fresh start&lt;/h2&gt;&lt;p&gt;So, er yeah. I haven't really blogged for a &lt;i&gt;long&lt;/i&gt; time - this time it will be different. I promise.&lt;/p&gt;&lt;p&gt;Hmm, I am already sceptical. It is well known that 'trying harder' never works, so what is different this time? Well, I have some objectives which are &lt;a href='https://en.wikipedia.org/wiki/SMART_criteria'&gt;SMART&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;pecific&lt;/li&gt;&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;easurable&lt;/li&gt;&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;greed upon&lt;/li&gt;&lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;ealistic&lt;/li&gt;&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;ime-based&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In a democracy of 1 it is pretty easy to meet the 'Agreed upon' criteria. So, what is my goal? To publish one 'meaty' blog post a week. By 'meaty' I mean a reaction to some non-trivial event in real life, probably work related.&lt;/p&gt;&lt;p&gt;What sorts of things will I ramble on about? Primarily technical I think, specifically around the Functional Programming and Enterprise landscape.&lt;/p&gt;&lt;p&gt;I care very passionately about Software Engineering and critical thinking as oppose to doing it &lt;code&gt;because Google&lt;/code&gt;. That will almost certainly creep in throughout the blog.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;jekyll,&amp;#95;so&amp;#95;long&quot;&gt;&lt;/a&gt;Jekyll, so long&lt;/h2&gt;&lt;p&gt;My previous blog was built using the excellent &lt;a href='https://jekyllrb.com'&gt;jekyll&lt;/a&gt;. The handful of posts can be found &lt;a href='https://github.com/yatesco/yatesco.github.io'&gt;on github&lt;/a&gt;. I fully intended to use it, but having upgraded to MacOS Sierra, installing jekyll was an exercise in pain.&lt;/p&gt;&lt;p&gt;&lt;code&gt;jekyll&lt;/code&gt; itself had moved to using &lt;code&gt;bundler&lt;/code&gt; which I don't object to at all. The thing I &lt;i&gt;do&lt;/i&gt; object to though is a gazillion &lt;code&gt;gem install&lt;/code&gt;s, failing on the somewhat infamous &lt;a href='http://www.nokogiri.org/tutorials/installing_nokogiri.html'&gt;Nokogiri&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Their &lt;a href='https://github.com/sparklemotion/nokogiri'&gt;GitHub&lt;/a&gt; issues list contains a number of helpful pointers when using &lt;code&gt;brew&lt;/code&gt;, but unfortunately I am using &lt;a href='https://www.macports.org'&gt;macports&lt;/a&gt; and after 3 hours or so of trying different incantations I gave up.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;cryogen&quot;&gt;&lt;/a&gt;Cryogen&lt;/h2&gt;&lt;p&gt;I had noticed &lt;a href='http://cryogenweb.org'&gt;Cryogen&lt;/a&gt; before but &lt;code&gt;jekyll&lt;/code&gt; was sufficient at the time, now I thought it deserved another look. And I am glad I did. Features?:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;tags&lt;/li&gt;&lt;li&gt;feeds&lt;/li&gt;&lt;li&gt;markdown (or that funny AsciiDoc ;-)&lt;/li&gt;&lt;li&gt;ridiculously trivial &lt;code&gt;disqus&lt;/code&gt; &lt;a href='http://cryogenweb.org/docs/configuration.html'&gt;integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Clojure (which I use full time at work)&lt;/li&gt;&lt;li&gt;lein&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some not-so-great bits:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the site is generated (following convention) in &lt;code&gt;resources\public&lt;/code&gt; so actually deploying the site requires an extra step or two. The solution can be as simple as having one git repo for the source and one for &lt;code&gt;resources\public&lt;/code&gt; which &lt;code&gt;GitHub Pages&lt;/code&gt; then serves.&lt;/li&gt;&lt;li&gt;the web site is generated automatically but you still need to refresh the web browser. I might investigate the most excellent &lt;a href='https://github.com/bhauman/lein-figwheel'&gt;figwheel&lt;/a&gt; to see if that can be integrated&lt;/li&gt;&lt;li&gt;it doesn't support &lt;code&gt;org-mode&lt;/code&gt;. I can hardly hold it to account for that, and given &lt;code&gt;org-mode&lt;/code&gt;'s excellent export modes it should be trivial to sort it out.&lt;/li&gt;&lt;li&gt;the default theme means &lt;code&gt;literal&lt;/code&gt; and &lt;a href='https://www.google.co.uk/search?q=happy+cat&amp;client=safari&amp;rls=en&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ved=0ahUKEwj&amp;ndash;dfIpKvPAhXqDcAKHY01BaAQsAQIHQ&amp;biw=1324&amp;bih=902'&gt;links&lt;/a&gt; aren't easily distinguished.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;An alternative to GitHub Pages is to host your own static server and &lt;code&gt;rsync&lt;/code&gt; it across, which is what I am doing.&lt;/p&gt;&lt;p&gt;Actually, because my &lt;code&gt;yak shaver&lt;/code&gt; was feeling particularly sharp I decided to use &lt;a href='https://circleci.com'&gt;circleci&lt;/a&gt; to deploy it which was as &lt;a href='https://github.com/yatesco/blog-cryogen/blob/master/circle.yml'&gt;trivial&lt;/a&gt; as:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;deployment:
  push&amp;#95;to&amp;#95;server:
    branch: master
    commands:
      - rsync -avz resources/public/ coliny@colinyates.co.uk:html/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i&gt;make sure to create a new key pair for your remote server, &lt;code&gt;ssh-copy-id&lt;/code&gt; to your remote server and then add the private key to your &lt;code&gt;circleci&lt;/code&gt; project&lt;/i&gt;&lt;/p&gt;&lt;p&gt;As the ever-growing engineer I notice a few upgrades to my process:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;rather than commit the entire &lt;code&gt;resources\public&lt;/code&gt; I could just commit the &lt;code&gt;resources\templates&lt;/code&gt; directory and have &lt;code&gt;circleci&lt;/code&gt; run &lt;code&gt;lein run&lt;/code&gt; before deployment&lt;/li&gt;&lt;li&gt;having the &lt;code&gt;rsync&lt;/code&gt; call in &lt;code&gt;circle.yml&lt;/code&gt; feels a bit yucky. Better to have a commited script which &lt;code&gt;circleci&lt;/code&gt; calls.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Anyways, it was relatively harmless and the blog is off to a flying start.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;future!&quot;&gt;&lt;/a&gt;The Future!&lt;/h3&gt;&lt;p&gt;Watch this space ;-).&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 25 Sep 2016 00:00:00 +0100
</pubDate>
</item>
</channel>
</rss>
