<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://colinyates.co.uk' rel='self' type='application/rss+xml'/>
<title>
Random musings
</title>
<link>
http://colinyates.co.uk
</link>
<description>
Random musics of a confused mind
</description>
<lastBuildDate>
Fri, 02 Dec 2016 10:45:22 +0000
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-12-02-lein-manage-dependant-project/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-12-02-lein-manage-dependant-project/
</link>
<title>
Managing dependant projects with lein
</title>
<description>
&lt;p&gt;I &lt;i&gt;strongly&lt;/i&gt; believe that ignorance is one of the most powerful tools we should employ when we build software. As a mechanism to enforce de-coupling it is great. What?! Huh?! No, I haven't lost the plot (any more than usual), I simply mean that I strive to build small components that are as ignorant as possible. The opposite of ignorance is knowledge and the more knowledge a component has the more coupled it is.&lt;/p&gt;&lt;p&gt;So, when it comes to Clojure I tend to have multiple lightweight projects, but unfortunately they can't be released publicly as they are all commercially sensitive. So how do I manage them?&lt;/p&gt;&lt;p&gt;Despite the mass of disconnected and incomplete material on the web it is actually straight forward (for &lt;a href='http://leiningen.org/'&gt;lein&lt;/a&gt;) thanks to the fact &lt;code&gt;lein&lt;/code&gt; talks &lt;code&gt;maven&lt;/code&gt;. Maven uses &lt;a href='https://maven.apache.org/wagon/'&gt;&lt;code&gt;wagons&lt;/code&gt;&lt;/a&gt; as a transport abstraction to push and pull files around. So we simply need to find a &lt;code&gt;wagon&lt;/code&gt; implementation that &lt;code&gt;lein&lt;/code&gt; understands and hook it up.&lt;/p&gt;&lt;p&gt;There are various &lt;code&gt;wagon&lt;/code&gt; implementations, and I figure most people would use Amazon's &lt;a href='https://aws.amazon.com/s3/'&gt;S3&lt;/a&gt; and there &lt;a href='https://github.com/s3-wagon-private/s3-wagon-private'&gt;are&lt;/a&gt; &lt;a href='https://github.com/pjstadig/lein-maven-s3-wagon'&gt;plugins&lt;/a&gt; for that. Just to be contrary I want to use our private servers. Thankfully there is also an SSH &lt;a href='https://github.com/ToBeReplaced/lein-wagon-ssh-external'&gt;implementation&lt;/a&gt; which works a treat.&lt;/p&gt;&lt;p&gt;Using it couldn't be simpler:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;make sure any machine that needs to access the server (e.g. your local build machine and CI server) has access via SSH keys&lt;/li&gt;&lt;li&gt;in the project you want to deploy add the plugin to &lt;code&gt;:plugins&lt;/code&gt; section of your &lt;code&gt;project.clj&lt;/code&gt;&lt;/li&gt;&lt;li&gt;define your repository by adding it to your &lt;code&gt;:repositories&lt;/code&gt; sequence in your &lt;code&gt;project.clj&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now you can &lt;code&gt;lein deploy &amp;lt;your-repository&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In the project that needs to access the previously deployed project add the same &lt;code&gt;plugin&lt;/code&gt; and &lt;code&gt;repository&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;As an example, if &lt;code&gt;project-a&lt;/code&gt; needs to be deployed to the SSH server its &lt;code&gt;project.clj&lt;/code&gt; might look like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject my-company/project-a &amp;quot;0.4.1&amp;quot;
  :dependencies &amp;#91;
  ...
  &amp;#93;

  :plugins &amp;#91;&amp;#91;lein-wagon-ssh-external &amp;quot;0.1.0&amp;quot;&amp;#93;&amp;#93;

  :repositories &amp;#91;&amp;#91;&amp;quot;my-repo&amp;quot; {:url           &amp;quot;scp://some.valid.host/with/a/valid/path&amp;quot;
                             :username      &amp;quot;the-user-who-is-authenticated-by-your-key&amp;quot;
                             :sign-releases false}&amp;#93;&amp;#93;

  :aliases {
            ...
            &amp;quot;deploy!&amp;quot; &amp;#91;&amp;quot;do&amp;quot; &amp;quot;full-build-cljs!&amp;quot; &amp;#91;&amp;quot;deploy&amp;quot; &amp;quot;my-repo&amp;quot;&amp;#93;&amp;#93;
            }&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(&lt;i&gt;NOTE: I didn't bother signing our internal releases, so I added &lt;code&gt;:sign-releases false&lt;/code&gt;.&lt;/i&gt;)&lt;/p&gt;&lt;p&gt;To allow &lt;code&gt;project-b&lt;/code&gt; to access &lt;code&gt;project-a&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defproject my-company/project-b &amp;quot;0.1-SNAPSHOT&amp;quot;
  :dependencies &amp;#91;
   &amp;#91;my-company/project-a &amp;quot;0.4.1&amp;quot;&amp;#93;
  &amp;#93;

  :plugins &amp;#91;&amp;#91;lein-wagon-ssh-external &amp;quot;0.1.0&amp;quot;&amp;#93;&amp;#93;

  :repositories &amp;#91;&amp;#91;&amp;quot;my-repo&amp;quot; {:url      &amp;quot;scp://some.valid.host/with/a/valid/path&amp;quot;
                             :username &amp;quot;the-user-who-is-authenticated-by-your-key&amp;quot;}&amp;#93;&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simple as that :-).&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 02 Dec 2016 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-11-18-nas-fun/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-11-18-nas-fun/
</link>
<title>
NAS fun
</title>
<description>
&lt;p&gt;Fun with &lt;a href='https://en.wikipedia.org/wiki/Network-attached_storage'&gt;NAS's&lt;/a&gt;. If you find that a contradiction in terms then you might not be the right audience for this post - all the best :-).&lt;/p&gt;&lt;p&gt;I have about 2TB of data that I need to maintain. Some of it is (legally owned) media, some of it are documents, photos, machine backups etc.&lt;/p&gt;&lt;p&gt;Having managed a bunch of IT infrastructure (why do people assume Software Engineers know the first thing about computers?!) I am now utterly paranoid about losing data. The very first question in my head when thinking about systems is &quot;what happens when it all goes wrong&quot;. Not &lt;i&gt;if&lt;/i&gt;, but &lt;i&gt;when&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;There are a whole bunch of NASes out there, but to be blunt, as soon as you want a &quot;decent&quot; one with a decent CPU the price sky rockets.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;raid&amp;#95;to&amp;#95;the&amp;#95;rescue&amp;#95;-&amp;#95;only&amp;#95;not&amp;#95;really&quot;&gt;&lt;/a&gt;RAID to the rescue - only not really&lt;/h2&gt;&lt;p&gt;Also, they typically only use the standard RAID profiles which are block based. This means if you lose a drive then sure, you might be able to rebuild the entire array, but the files on disk will be unintelligible outside of that array. If the hardware between you and the disks fails, e.g. the hardware controller then....&lt;/p&gt;&lt;p&gt;There is also a well established theory that given the size of the disks we can get nowadays, there is a significant chance that &lt;i&gt;another&lt;/i&gt; disk in the RAID array will fail before the RAID has rebuilt. This gets more likely the more disks you have.&lt;/p&gt;&lt;p&gt;The other design flaw with typical RAID implementations is that they assume homogeneous disks, specifically they assume the disks are the same size. If they aren't then it will only use the smallest disk size. A RAID with a 250GB disk and 1TB disk will only use 250GB from each disk.&lt;/p&gt;&lt;p&gt;So, RAID isn't my ideal go-to anymore.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;file&amp;#95;based&amp;#95;solutions&quot;&gt;&lt;/a&gt;File based solutions&lt;/h2&gt;&lt;p&gt;RAID works by splitting everything into blocks and distributing those blocks around the disks. Wouldn't it be great if there was another solution which treated your &lt;i&gt;files&lt;/i&gt; as atomic? Redundancy at a &lt;i&gt;file&lt;/i&gt; level?&lt;/p&gt;&lt;p&gt;The primary benefit is obvious: if a disk fails &lt;i&gt;the files on every other disk are still accessible&lt;/i&gt;. The main downside is that reads aren't spread across the pool but are sourced from the single disk that the file resides on.&lt;/p&gt;&lt;p&gt;The other benefit is that the major provides of files-based solutions support heterogeneous disks, specifically they will use all of the disk space in each disk even if they aren't the same size.&lt;/p&gt;&lt;p&gt;This makes a wonderful upgrade strategy, simply add a larger disk and let the pool of disks work itself out. (I will explain later how this can work).&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;file&amp;#95;based&amp;#95;nas&quot;&gt;&lt;/a&gt;File based NAS&lt;/h2&gt;&lt;p&gt;So you can configure a NAS to use &lt;a href='https://en.wikipedia.org/wiki/Non-RAID_drive_architectures'&gt;JBOD&lt;/a&gt;, and then run a software file-based solution on top of that. But, but, but, what's the point? Most people buy a NAS for the inherent safety, which a JBOD has none of. If you have to run another computer as well then why bother with the NAS?&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;nas,&amp;#95;no&amp;#95;thanks&quot;&gt;&lt;/a&gt;NAS, no thanks&lt;/h2&gt;&lt;p&gt;So, given I have to run a machine anyway to manage the JBOD I didn't bother with a NAS. I have a spare desktop running &lt;a href='https://plex.tv'&gt;plex&lt;/a&gt; so I simply stuck a bunch of disks in the 'server', configure a software based solution called &lt;a href='https://stablebit.com/DrivePool'&gt;DrivePool&lt;/a&gt; and off I go.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;drivepool&quot;&gt;&lt;/a&gt;Drivepool&lt;/h2&gt;&lt;p&gt;So Drivepool, which I &lt;i&gt;highly&lt;/i&gt; recommend (no affiliation) creates a 'pool' which is exposed as a single drive letter in Windows. You can add as many disks of different sizes as you like and the pool grows automatically.&lt;/p&gt;&lt;p&gt;Well, the neat thing is that the pool can be configured with internal redundancy such that any file is written to at least N &lt;i&gt;other&lt;/i&gt; disks. In addition, when reading, the pool is clever enough to read from each copy in parallel to speed things up.&lt;/p&gt;&lt;p&gt;The special sauce here is that their companion product &lt;a href='https://stablebit.com/Scanner'&gt;Scanner&lt;/a&gt; monitors the health (through &lt;a href='https://en.wikipedia.org/wiki/S.M.A.R.T.'&gt;S.M.A.R.T&lt;/a&gt; attributes) of your disks and if a disk starts to fail then it will automatically move files off that drive onto another healthy drive. In the background, automatically.&lt;/p&gt;&lt;p&gt;Alternatively, you can configure the pool to only allow duplicates on 'failing' disks.&lt;/p&gt;&lt;p&gt;What happens when the disk fails? If you have redundancy then literally just pull that thing out (shutting down your machine first if your hardware doesn't support hot plugging). Drivepool will notice and immediately start duplicating any files that are now unduplicated.&lt;/p&gt;&lt;p&gt;Adding a new disk? Just plug it in, add it to the pool and Drivepool will rebalance the pool.&lt;/p&gt;&lt;p&gt;It really is quite special.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;backups&quot;&gt;&lt;/a&gt;Backups&lt;/h2&gt;&lt;p&gt;The third companion tool from Stablebit is &lt;a href='https://stablebit.com/CloudDrive'&gt;CloudDrive&lt;/a&gt;. This is a 'disk' that is backed by a cloud provider (OneDrive, DropBox etc.). You create a new drive and simply link it to a cloud provider. Multiple disks can be backed by the same cloud provider. Each disk is backed by a local cache which can be as big or small as you like.&lt;/p&gt;&lt;p&gt;DrivePool doesn't copy the file as-is, it breaks it down into chunks of, say, 10MB (which can be configured) and transparently uploads your files in these chunks.&lt;/p&gt;&lt;p&gt;If you have Office365 personal then you have 5 separate 1TB onedrive accounts just waiting to be full. Create 5 separate CloudDrives and then combine them all into a single DrivePool.&lt;/p&gt;&lt;p&gt;Oh, I didn't mention that? Yep - the drives created by DrivePool are just like any other drive and can be added into an existing pool or you can create a new pool just for your cloud drives. Your call.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;v1&amp;#95;-&amp;#95;my&amp;#95;initial&amp;#95;solution&quot;&gt;&lt;/a&gt;v1 - my initial solution&lt;/h2&gt;&lt;p&gt;My first solution looks like this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a &quot;main&quot; drivepool with a bunch of disks&lt;/li&gt;&lt;li&gt;5 CloudDrives for each member of my Office365 family. Each CloudDrive has a 1TB cache so my really slow upload speed doesn't impact my write speed.&lt;/li&gt;&lt;li&gt;a single &quot;backup&quot; drivepool backed by those cloud drives&lt;/li&gt;&lt;li&gt;crashplan backing up my &quot;main&quot; drivepool to my &quot;backup&quot; drivepool&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And it works amazingly well.&lt;/p&gt;&lt;p&gt;Except, well, I was a bit nervous of having to cobble together those separate CloudDrives if anything went wrong, and CloudDrive is still a beta product (although it has worked flawlessly for me).&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;v2&quot;&gt;&lt;/a&gt;v2&lt;/h2&gt;&lt;p&gt;I no longer use CloudDrive, simply because CrashPlan already encrypts everything, admittedly it does kick out 4GB blocks which is a risk uploading, but from what I can see, once something is uploaded it is never changed so no re-uploading.&lt;/p&gt;&lt;p&gt;Now, I simply have two pools with CrashPlan backing up from the main to the backup. I then have &lt;a href='https://www.goodsync.com'&gt;GoodSync&lt;/a&gt; backing up the backup pool to my Unlimited Amazon Cloud.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;alternatives&quot;&gt;&lt;/a&gt;Alternatives&lt;/h2&gt;&lt;p&gt;I could have created a single cloud drive backed by Amazon Unlimited, added that to my 'main' drive pool, configured the pool to be redundant and marked only the cloud drive to store only duplicates.&lt;/p&gt;&lt;p&gt;This isn't a backup as such, it is mirroring to the cloud, but it does mean everything is duplicated locally and remotely.&lt;/p&gt;&lt;p&gt;The other flaw with this is the fact that Amazon Cloud Drive is still an experimental provider for CloudDrive. Stablebit's &lt;a href='http://community.covecube.com/index.php?/topic/1588-amazon-cloud-drive-why-is-it-not-supported/'&gt;forum&lt;/a&gt; has more info.&lt;/p&gt;&lt;p&gt;This, and my other two versions require at least twice as much disk space as the size of the main pool. But hey, that's what redundancy requires and I am fine with that.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;other&amp;#95;considerations&quot;&gt;&lt;/a&gt;Other considerations&lt;/h2&gt;&lt;p&gt;Any solution that isn't writing directly to the cloud has a window of opportunity for the cloud version to be out of sync with the local version. This means CrashPlan might locally have completed the local backup, goodsync is halfway through uploading the data and BOOM, the computer dies. How likely is it that the cloud version will be usable by CrashPlan?&lt;/p&gt;&lt;p&gt;Quite likely actually :-) given CrashPlan's strategy of append-only. &lt;strong&gt;NONE OF THIS IS TESTED SO DON'T BELIEVE A WORD OF IT&lt;/strong&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;why&amp;#95;not&amp;#95;just&amp;#95;use&amp;#95;crashplan's&amp;#95;cloud&quot;&gt;&lt;/a&gt;Why not just use CrashPlan's Cloud&lt;/h2&gt;&lt;p&gt;I like the idea of a local copy of CrashPlan for speedier recovery. I did start out with CrashPlan but their upload speed started out fine and then hovered around 10KB - yeah. Nope.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;zfs&quot;&gt;&lt;/a&gt;ZFS&lt;/h2&gt;&lt;p&gt;How can I not consider ZFS? Well, ZFS absolutely rocks and I was really tempted by the inbuilt snapshot facility. Consider it taking a nightly snapshot and then sharing those snapshots over a SAMBA share. Lovely.&lt;/p&gt;&lt;p&gt;But, it won't let you just throw a new disk in a pool as it expects homogeneous disks. It also wants slightly more serious hardware than I had. But yeah, it is excellent.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;unraid&quot;&gt;&lt;/a&gt;Unraid&lt;/h2&gt;&lt;p&gt;I did use &lt;a href='https://lime-technology.com'&gt;Unraid&lt;/a&gt; and it is &lt;i&gt;amazing&lt;/i&gt;. It runs off a USB key and is a Linux distro (Slackware?) which supports file-backed heterogeneous pools. Redundancy is done through a separate parity disk(s).&lt;/p&gt;&lt;p&gt;It also understands dockers so has a whole bunch of plugins. I used it for a couple of weeks and plex and crashplan worked perfectly fine.&lt;/p&gt;&lt;p&gt;Why did I switch?&lt;/p&gt;&lt;p&gt;Virtual machines use KVM and I experienced a bunch of VM crashes on my Windows 10 VM. I also didn't like the fact it wouldn't auto-balance or duplicate amongst disks. So if I had 1 TB disk that was full and I added another 1TB disk, it wouldn't distribute the load automatically.&lt;/p&gt;&lt;p&gt;I was also a little uncomfortably with the obsession with gaming - I want a NAS, not a gaming rig ;-).&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;windows&amp;#95;storage&amp;#95;spaces&quot;&gt;&lt;/a&gt;Windows Storage Spaces&lt;/h2&gt;&lt;p&gt;I considered this for a few minutes but googling around showed a whole bunch of horror stories. It is also block based which isn't ideal.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;snapraid&quot;&gt;&lt;/a&gt;SnapRaid&lt;/h2&gt;&lt;p&gt;&lt;a href='http://www.snapraid.it'&gt;SnapRAID&lt;/a&gt; is probably the worst named piece of software ;-). It calculates parity across a filesystem and has nothing to do with RAID, other than most RAIDs use parity.&lt;/p&gt;&lt;p&gt;I know a bunch of people run SnapRAID across their DrivePool pool. Given the CrashPlan backup I never saw the point.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;odrive&quot;&gt;&lt;/a&gt;Odrive&lt;/h2&gt;&lt;p&gt;&lt;a href='https://www.odrive.com'&gt;Odrive&lt;/a&gt; lets you sync locally, but the free version forces you into a weird hierarchy where each cloud provider account is a separate directory.&lt;/p&gt;&lt;p&gt;Sure, it isn't that horrendous, and the paid version would let you sync folders outside the 'odrive folder' but it is &lt;i&gt;ridiculously&lt;/i&gt; expensive for what it is.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;rclone&quot;&gt;&lt;/a&gt;rclone&lt;/h2&gt;&lt;p&gt;&lt;a href='http://rclone.org'&gt;rclone&lt;/a&gt; is brilliant, and is exactly the software I wanted to use, but without a GUI I am now too lazy :-). I do use rclone to backup all of work's servers, but for my time at home, if I wanted to drop down to the CLI I would use Linux.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;macrium&quot;&gt;&lt;/a&gt;Macrium&lt;/h2&gt;&lt;p&gt;&lt;a href='http://www.macrium.com/reflectfree.aspx'&gt;Macrium&lt;/a&gt; isn't a part of the storage puzzle but it does play a heavy part of my backup solution. It is absolutely great (UI sucks a bit) as an imaging solution. I have it installed on all of the household Window PCs and it nightly images using a Full/Differential strategy.&lt;/p&gt;&lt;p&gt;Where does it store the images? Well, on the &quot;main&quot; drivepool of course :-).&lt;/p&gt;&lt;p&gt;Oh, and it is free.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;future&quot;&gt;&lt;/a&gt;Future&lt;/h2&gt;&lt;p&gt;When CloudDrive matures out of beta and has first class support for Amazon Cloud Drive I may well drop GoodSync and have my &quot;backup&quot; pool backed up with a single CloudDrive linked to ACD.&lt;/p&gt;&lt;p&gt;Alternatively, now that Amazon Cloud Drive &lt;i&gt;does&lt;/i&gt; folder syncing, when/if it ever allows you to choose the folder you want to sync then I might have it sync to my &quot;backup&quot; pool.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;If you have a single machine and simply need a backup, go grab CrashPlan or BackBlaze. If you have a network of machines and want to back them up and aren't paranoid then go grab a (at least RAID1) NAS.&lt;/p&gt;&lt;p&gt;However, if you want more control then I recommend you take a look at the &lt;a href='https://stablebit.com/Buy/CloudDrive'&gt;DrivePool, Scanner and CloudDrive bundle&lt;/a&gt;. It is only ~$59 for a perpetual lifetime license.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;pretty&amp;#95;pictures&quot;&gt;&lt;/a&gt;Pretty pictures&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Macrium&lt;img src=&quot;/img/nas-fun/macrium.png&quot; alt=&quot;macrium&quot; /&gt;&lt;/li&gt;&lt;li&gt;the &quot;main&quot; pool&lt;img src=&quot;/img/nas-fun/drivepool-main.png&quot; alt=&quot;&quot;main&quot; DrivePool&quot; /&gt;&lt;/li&gt;&lt;li&gt;the &quot;backup&quot; pool&lt;img src=&quot;/img/nas-fun/drivepool-backup.png&quot; alt=&quot;&quot;backup&quot; DrivePool&quot; /&gt;&lt;/li&gt;&lt;li&gt;CrashPlan backing up to my local &quot;backup&quot; CrashPlan folder&lt;img src=&quot;/img/nas-fun/crashplan.png&quot; alt=&quot;CrashPlan&quot; /&gt;&lt;/li&gt;&lt;li&gt;GoodSync mirroring my &quot;backup&quot; pool to Amazon Cloud Drive&lt;img src=&quot;/img/nas-fun/goodsync.png&quot; alt=&quot;GoodSync&quot; /&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 18 Nov 2016 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-11-17-a-moan-about-apple/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-11-17-a-moan-about-apple/
</link>
<title>
The rotting Apple
</title>
<description>
&lt;p&gt;I don't usually moan publicly as it never does any good and misery likes company. However, I am having a bad day, this is my personal blog and so Apple is the target.&lt;/p&gt;&lt;p&gt;When I first started using computers the major contenders were DOS, NextStep or Apple I (or II?). There were also Linux variants such as the venerable twm and fvwm. I think Gnome 1 was just rising up as well.&lt;/p&gt;&lt;p&gt;I loved NextStep with a passion. I also remember sinking &lt;i&gt;days&lt;/i&gt; into configuring my Linux X Windows config file. The first time I saw XWindows appear running FVWM and an xterm at 800x640 resolution was a moment to remember.&lt;/p&gt;&lt;p&gt;But NextStep, that was where it was at. Everything just made so much sense - the paradigms were intuitive and it just worked.&lt;/p&gt;&lt;p&gt;Roll on a few years and Apple re-appeared with a reputation for 'just working'. Windows 95 hinted at what we could do but it exposed so much technical complexity it was just a pain. Sure, the online update was great but it just never worked well. Apple was a complete contrast to that. There was nothing to configure, it all just worked. Plug in a camera - sure, a new mouse - fine. Of course, they needed to be Apple 'certified' but fine.&lt;/p&gt;&lt;p&gt;Like NextStep (which is of course no coincidence), the desktop paradigms just worked (OK, we won't talk about the horror of dragging your floppy disk to the rubbish bin to eject it).&lt;/p&gt;&lt;p&gt;I still liked Linux because I liked to tinker, and Apple hardware was far too expensive.&lt;/p&gt;&lt;p&gt;Around the time of OSX I bought into the ecosystem. The first iPhone was incredible to behold, it really was. The first OSX laptop was just magical.&lt;/p&gt;&lt;p&gt;I continued to like Linux but more and more of my head and heart share was going to OSX.&lt;/p&gt;&lt;p&gt;Then Apple took the pretty revolutionary step of not charging for OSes which bought a ton of loyalty from me. Not because of the money (there is always a way to give Apple money) but because it really showed that they cared about their users.&lt;/p&gt;&lt;p&gt;And everything still kept working seamlessly.&lt;/p&gt;&lt;p&gt;Then the MacBook Pro came along - then onboard SSD, retina etc. It just kept getting better.&lt;/p&gt;&lt;p&gt;So, the moan?&lt;/p&gt;&lt;p&gt;Well, Apple has always been a bit of walled garden, that is part of the territory and probably a necessary condition for the perceived quality (oooh, perceived, getting snippy now). But in recent years things just aren't as coherent or seamless as they used to be.&lt;/p&gt;&lt;p&gt;The ridiculousness of the iCloud 'app specific' file storage. The pain of getting the (close to 1TB) of photos out of iCloud. The pitifully small 8GB storage on iPhones and the failure for iCloud photos optimisation to actually, you know, free up space.&lt;/p&gt;&lt;p&gt;Rather than paradigms making sense and everything being seamless, we now have a mix of 'stateful' and 'stateless' apps (i.e. close the window and some apps will keep running, others will terminate) &lt;i&gt;within the Apple core products&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Two major UI changes in as many releases (the change of font and the introduction of the flat theme). The horror of skeuomorphism, but even worse; inconsistent skeuomorphism.&lt;/p&gt;&lt;p&gt;Rather than Apple leading the market by implementing the next thing we all need (even if we didn't realise it) they seem to have become a short-sighted, 'throw things out there and see what sticks' software company. If I wanted that I would be in the Microsoft camp. Oh wait, actually, Windows 10 is pretty neat. Sure - Microsoft were terrible 'user partners' (which is what a software provider should always be) with the &lt;strong&gt;very&lt;/strong&gt; dodgy upgrade practice, but when you swallow that and actually use Windows 10, yeah, it is pretty good.&lt;/p&gt;&lt;p&gt;The other big turn-off for me was the ridiculous price they charged for specific hardware components. I don't mind paying more for my premium laptop, I do mind paying extortionately more than market price to upgrade its components. Oh, and not being able to upgrade &lt;i&gt;anything&lt;/i&gt; post market? That stinks of money grabbing.&lt;/p&gt;&lt;p&gt;I could maybe swallow all of this if Apple's quality was there but to be blunt, it just isn't. I moved to macOS Sierra a while after it was released, but things just didn't feel as smooth or consistent. Some apps crash (iPhotos for example consistently crashed). I have since moved back to El Capitan and iPhotos still doesn't work. Sometimes it refuses to sync, other times it just crashes.&lt;/p&gt;&lt;p&gt;Then there are the bug bears that have always irritated me, but have always been quieted due to the good points. Things like browsing network shares. Or being able to start another instance/open a new window of a running application from the dock without having to right click.&lt;/p&gt;&lt;p&gt;The icing on the (very nasty tasting) cake was the pitiful service Apple have provided to us professionals. A maximum of 16GB in 2016 on their top of the range hardware? Really? Losing &lt;i&gt;all&lt;/i&gt; standard ports. Oh, we get a freaky little touch screen thing at the top of the keyboard.&lt;/p&gt;&lt;p&gt;Hardware is supposed to &lt;i&gt;evolve&lt;/i&gt;, not become more restrictive.&lt;/p&gt;&lt;p&gt;So, after this wall of moan what do I use? I still use El Capitan on my 2014 macbook pro. Not because it is perfect, far from it. But it is still the closest thing to a professional Linux machine I can find.&lt;/p&gt;&lt;p&gt;I was tempted by Windows 10 and Unbuntu on Windows but it just isn't as integrated as I would like. Ironically I get a better integration experience running Windows 10 in Parallels. Either OS can talk seamlessly to the other OS.&lt;/p&gt;&lt;p&gt;So yes, I am still here. But I am no longer here because I want to be, only because moving to Linux would be just a little bit too painful now and Windows 10 is still Windows :-) (I have always found Windows XP and 10 painful on the eyes). Windows 7 is the most tempting, but for a while Windows 7 has failed to update itself. I am &lt;i&gt;sure&lt;/i&gt; Microsoft hasn't done this on purpose to encourage everybody to upgrade to 10. Nope, of course not.&lt;/p&gt;&lt;p&gt;The key distinction now though, is I now longer use Apple &lt;i&gt;because&lt;/i&gt; of its eco-system and OS. I use it &lt;i&gt;despite&lt;/i&gt; the OS. No more iCloud, Apple Music etc. It is little more than a (still pretty beautiful) window manager.&lt;/p&gt;&lt;p&gt;The most damning summation I can give is that after years of suggesting to my technophobic in-laws that they &lt;i&gt;upgrade&lt;/i&gt; to OS I am now encouraging them to stay on Windows 10. OSX nor macOS cater to either professionals or beginners. iPhone - sure, for ever, but desktops/laptops - nope.&lt;/p&gt;&lt;p&gt;Moan over - go read something positive.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 17 Nov 2016 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-11-11-speeding-up-clojurescript/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-11-11-speeding-up-clojurescript/
</link>
<title>
Adding go-faster stripes to ClojureScript compilation
</title>
<description>
&lt;p&gt;If you are using &lt;a href='https://github.com/clojure/clojurescript'&gt;ClojureScript&lt;/a&gt; (and if not, why not? :-)) then I &lt;strong&gt;strongly&lt;/strong&gt; recommend you enable &lt;a href='https://github.com/clojure/clojurescript/wiki/Compiler-Options#parallel-build'&gt;parallel build&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I mistakenly thought this meant that it would run separate &lt;i&gt;builds&lt;/i&gt; in parallel, but no, it is far cleverer and more useful than that, it builds a single build in parallel.&lt;/p&gt;&lt;p&gt;(&lt;i&gt;Also, to be crystal clear, this isn't going to do anything to your &lt;/i&gt;runtime&lt;i&gt; performance, only the &lt;/i&gt;build&lt;i&gt; time.&lt;/i&gt;)&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;awesome&amp;#95;sauce&amp;#95;-&amp;#95;speed&amp;#95;me&amp;#95;up!&quot;&gt;&lt;/a&gt;Awesome sauce - speed me up!&lt;/h2&gt;&lt;p&gt;It is as simple as adding it to your &lt;code&gt;compiler&lt;/code&gt; options in your &lt;code&gt;cljsbuild&lt;/code&gt; config:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;clojure
:cljsbuild {:test-commands
              ;; Test command for running the unit tests in &amp;quot;test-cljs&amp;quot; &amp;#40;see below&amp;#41;.
              ;; $ lein cljsbuild test
              ;; NOTE: this does not call health/bootstrap as that causes errors, hence cljs-dev and cljs-prod
              {&amp;quot;unit&amp;quot; &amp;#91;&amp;quot;phantomjs&amp;quot;
                       &amp;quot;phantom/unit-test.js&amp;quot;
                       &amp;quot;resources/private/html/unit-test.html&amp;quot;&amp;#93;}
              :builds
              {:test {:source-paths &amp;#91;&amp;quot;src/clj&amp;quot; &amp;quot;src/clj-prod&amp;quot; &amp;quot;src/cljc&amp;quot; &amp;quot;src/cljs&amp;quot; &amp;quot;src/cljs-prod&amp;quot;&amp;#93;
                      :compiler     {:parallel-build true
                                     :output-to      &amp;quot;resources/private/js/unit-test.js&amp;quot;
                                     :output-dir     &amp;quot;resources/private/js/out&amp;quot;
                                     :optimizations  :whitespace
                                     :pretty-print   true}}
               :dev  {:source-paths &amp;#91;&amp;quot;src/clj&amp;quot; &amp;quot;src/clj-prod&amp;quot; &amp;quot;src/cljc&amp;quot; &amp;quot;src/cljs&amp;quot; &amp;quot;src/cljs-prod&amp;quot;&amp;#93;
                      :figwheel     {:on-jsload      &amp;quot;health.bootstrap/run-render&amp;quot;
                                     :websocket-host :js-client-host}
                      :compiler     {:main                 health.core
                                     :parallel-build       true
                                     :output-to            &amp;quot;resources/public/compiled/js/app.js&amp;quot;
                                     :output-dir           &amp;quot;resources/public/compiled/js/out&amp;quot;
                                     :asset-path           &amp;quot;compiled/js/out&amp;quot;
                                     :source-map-timestamp true}}
               :prod {:source-paths &amp;#91;&amp;quot;src/clj&amp;quot; &amp;quot;src/clj-prod&amp;quot; &amp;quot;src/cljc&amp;quot; &amp;quot;src/cljs&amp;quot; &amp;quot;src/cljs-prod&amp;quot;&amp;#93;
                      :compiler     {:main           health.core
                                     :parallel-build true
                                     :output-to      &amp;quot;resources/public/compiled/js/app.js&amp;quot;
                                     :optimizations  :advanced
                                     ;; for debugging
                                     :pretty-print   true
                                     :pseudo-names   true
                                     ;; for debugging
                                     }}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(&lt;i&gt;NOTE: I only added it to the &lt;code&gt;:dev&lt;/code&gt; build but I guess you could add it to each build if you wanted to&lt;/i&gt;)&lt;/p&gt;&lt;p&gt;Anecdotally (meaning I can't be bothered to time it properly) it sped up my build by about 300% - yep, that much. Restarting the REPL in the lovely CIDER is no longer an excuse to go and grab some coffee.&lt;/p&gt;&lt;p&gt;Have a great day!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 11 Nov 2016 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-11-10-helm-ag-ignore-files/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-11-10-helm-ag-ignore-files/
</link>
<title>
Restricting ag to certain files
</title>
<description>
&lt;p&gt;&lt;a href='https://github.com/ggreer/the_silver_searcher'&gt;ag&lt;/a&gt; is great and searches through your code base in the blink of an eye. Coupled with &lt;a href='https://github.com/syohex/emacs-helm-ag'&gt;helm&lt;/a&gt; it makes for a great experience finding things. If run in a &lt;code&gt;git&lt;/code&gt; project then it helpfully ignores those in your &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;&lt;p&gt;However, in most projects I have files with different extensions, maybe some &lt;code&gt;.md&lt;/code&gt; for documentation, some &lt;code&gt;.html&lt;/code&gt; for published documentation, &lt;code&gt;.clj&lt;/code&gt;, &lt;code&gt;.cljs&lt;/code&gt;, &lt;code&gt;.cljc&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt; etc. I often know in which files the thing I am searching for lives, but I hadn't figured out a way to restrict &lt;code&gt;ag&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;That isn't quite right - you can restrict &lt;code&gt;ag&lt;/code&gt; at the command line with &lt;code&gt;-G&amp;lt;backslash&amp;gt;.&amp;lt;ext&amp;gt;&lt;/code&gt; so &lt;code&gt;ag -G&amp;lt;backslash&amp;gt;.cljs DEBT&lt;/code&gt; will find the (unfortunately many) instances of code that I consider technical debt.&lt;/p&gt;&lt;p&gt;(&lt;i&gt;NOTE: Unfortunately I can't figure out how to escape the backslash (&amp;#92;) in code blocks so the literal text is &quot;ag -G&amp;#92;.cljs&quot;&lt;/i&gt;)&lt;/p&gt;&lt;p&gt;This works great, but in spacemacs these sorts of configuration switches are typically mapped to keys.&lt;/p&gt;&lt;p&gt;Reading the really useful spacemacs FAQ &lt;a href='https://github.com/syl20bnr/spacemacs/blob/master/doc/FAQ.org#use-helm-ag-to-search-only-in-files-of-a-certain-type'&gt;tells you&lt;/a&gt; that what you type in the helm input is passed straight through to &lt;code&gt;ag&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So, next time I need to feel depressed I can search (&lt;code&gt;SPC s p&lt;/code&gt;) for &quot;DEBT&quot; or, if I only want to feel generally low then I can search for &lt;code&gt;-G&amp;lt;backslash&amp;gt;.clj DEBT&lt;/code&gt; :-)&lt;/p&gt;&lt;p&gt;Have a great day all.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 10 Nov 2016 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-11-08-abstractions/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-11-08-abstractions/
</link>
<title>
The power of an abstraction
</title>
<description>
&lt;p&gt;I see a lot of code bases getting into a mess through an inappropriate use of abstraction. Like many things in the Software Engineering industry, it is a tool which is in wide-spread use, learned from poor examples and not particularly well understood.&lt;/p&gt;&lt;p&gt;For me, the best definition of an abstraction, and I apologise for not crediting whoever coined this phrase (&lt;i&gt;it may well have been me in my yuff :-) but I am pretty sure I read it somewhere&lt;/i&gt;):&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; an abstraction is a name that allows you to more meaningfully and accurately discuss something &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;That's it. A simple name. Although, if you have been around long enough you will realise that naming things is actually really hard.&lt;/p&gt;&lt;p&gt;Implicit in the above statement is the notion that an abstraction is a composite of detail. The abstraction is synonymous with all of the rules, behaviours, properties, interactions, lifecycles etc. of the thing it represents.&lt;/p&gt;&lt;p&gt;How does this differ from 'mere' categorisation? For me (which is my way of saying I am probably wrong), categorisation is a function of what you can see and touch &lt;i&gt;now&lt;/i&gt;. Abstraction is about identifying a new &lt;i&gt;thing&lt;/i&gt;. Categorisation is about things as they are, abstraction is about what might be.&lt;/p&gt;&lt;p&gt;Another perspective is that an abstraction is a citizen of the &lt;i&gt;ubiquitous language&lt;/i&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;what&amp;#95;is&amp;#95;an&amp;#95;abstraction&amp;#95;not?&quot;&gt;&lt;/a&gt;What is an abstraction not?&lt;/h2&gt;&lt;p&gt;An abstraction is not simply the normalising of characteristics or properties. 'Everything to do with validation becomes IAmValidatable' is too blunt a hammer.&lt;/p&gt;&lt;p&gt;Also, abstraction is not everything represented by an Interface or protocol. Every abstraction doesn't require an Interface or protocol, some abstractions might not even be mentioned in your code (although if they aren't in the model itself then I might start asking questions).&lt;/p&gt;&lt;p&gt;By definitions, good abstractions aren't ambiguous. They mean one thing and only one thing.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;what&amp;#95;does&amp;#95;an&amp;#95;abstraction&amp;#95;buy&amp;#95;us?&quot;&gt;&lt;/a&gt;What does an abstraction buy us?&lt;/h2&gt;&lt;p&gt;A well-formed abstraction is worth its weight in gold. A poor abstraction is less than worthless - it will almost certain lead to ambiguity and miscommunication down the line. The benefits:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;clarity and richness in the ubiquitous language&lt;/li&gt;&lt;li&gt;reduction of ambiguity when talking about the abstraction&lt;/li&gt;&lt;li&gt;reduction in the amount of detail needed when talking about what the abstraction represents&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As you can see, abstractions are all about communication.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;a&amp;#95;good&amp;#95;name&amp;#95;for&amp;#95;an&amp;#95;abstraction?&quot;&gt;&lt;/a&gt;A good name for an abstraction?&lt;/h2&gt;&lt;p&gt;I kid you not when I tell you that the best name for an abstraction may well be 'wibble' or 'bloobies' or 'gwenters'. What is this language I am using? What secret sauce have I drunk? Aren't they all meaningless?&lt;/p&gt;&lt;p&gt;Yes. Absolutely. That is the point!&lt;/p&gt;&lt;p&gt;If I am trying to convey some complex information to you, and I can't quite put my finger on it but both you and I recognise the shape of it, the &lt;i&gt;worst&lt;/i&gt; thing we could do is come up with a label that implies more than we mean. In those situations yes, I have talked about 'wibbles' to a client. And yes, they also thought I was nuts until I explained the problem.&lt;/p&gt;&lt;p&gt;Later on, when the abstraction became clearer we came up with a wonderful abstraction - it was clear, concise, normalised (in that it didn't mean anything else) and was &lt;i&gt;slightly&lt;/i&gt; different to what we had been discussing earlier.&lt;/p&gt;&lt;p&gt;Some good examples of abstractions you might run into?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;transaction:  clearly defined boundaries and semantics and represents something real and useful&lt;/li&gt;&lt;li&gt;sequence: a small, well defined concept and is realised by many things (lists, vectors, dictionaries etc.)&lt;/li&gt;&lt;li&gt;session: similar to transaction&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The list is almost endless. The more you look the more you see abstractions.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;a&amp;#95;bad&amp;#95;name&amp;#95;for&amp;#95;an&amp;#95;abstraction&quot;&gt;&lt;/a&gt;A bad name for an abstraction&lt;/h2&gt;&lt;p&gt;The worst example of an abstraction (by which I mean an insufficiency in its value as a means of communication) I have seen is in the Healthcare Environment. 'Patient', as you might expect, is used a lot. The problem is that it has different and distinct &lt;i&gt;meanings&lt;/i&gt; in different contexts. The abstraction 'patient' means:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a body: a set of demographics who the Healthcare system interacts with&lt;/li&gt;&lt;li&gt;an appointment: &quot;which patients do you have? I have a 10:30 and a 12:30&quot;&lt;/li&gt;&lt;li&gt;composite: the composite of appointments that a single 'body' has had&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; Now, careful! I am not saying that different perspectives of a domain concept is a bad thing. DDD absolutely advocates this. This isn't that. This is an example where the same term represents distinct concepts. Person and Appointment, or maybe Interaction would be better names. The Appointment/Interaction would have a link to Person, but they are clearly different things.&lt;/p&gt;&lt;p&gt; For clarity, DDD suggests that different bounded contexts will care about different aspects of the same thing. So accounting might care about the costs associated with the previous interactions of a Person and only require their unique identifier. The medical team might only care about the previous interactions to identify drug dependencies etc. They are all different parts of the same thing.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;aren't&amp;#95;abstractions&amp;#95;all&amp;#95;wishy&amp;#95;washy&amp;#95;and&amp;#95;result&amp;#95;in&amp;#95;levels&amp;#95;of&amp;#95;indirection?&quot;&gt;&lt;/a&gt;Aren't abstractions all wishy washy and result in levels of indirection?&lt;/h2&gt;&lt;p&gt;No, abstractions don't &lt;i&gt;have&lt;/i&gt; to be ephemeral. They &lt;i&gt;absolutely are &lt;strong&gt;not&lt;/strong&gt;&lt;/i&gt; simply a level of indirection. If anything, an abstraction removes levels of (conceptual) indirection by bringing some notion closer to you.&lt;/p&gt;&lt;p&gt;That said, there is sometimes a gap between the concrete and the correct configuration of an abstraction. Consider a request for datasetX. If the server has a model of datasetX then there is no distance. However, if the server uses abstractions of 'data points' and 'relations' and 'criteria', and datasetX is a configuration of those abstractions wired together then yes, that is distance. But it &lt;i&gt;isn't&lt;/i&gt; distance between the concrete and the abstraction, it is the &lt;i&gt;configuration&lt;/i&gt; of the abstraction that represents the concrete.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;great,&amp;#95;so&amp;#95;i&amp;#95;can&amp;#95;create&amp;#95;abstractions&quot;&gt;&lt;/a&gt;Great, so I can create abstractions&lt;/h2&gt;&lt;p&gt;Of course you can, and almost certainly you already have. However, be ruthless. Ensure that at all times everybody has the same understanding of an abstraction otherwise it is worse than useless. Does it matter if everybody has the &lt;i&gt;wrong&lt;/i&gt; understanding? Of course, but consistency and clarity are the objective here, not licensing the semantic police to be pains in the backsides.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;hang&amp;#95;on,&amp;#95;isn't&amp;#95;this&amp;#95;really&amp;#95;about&amp;#95;the&amp;#95;ubiquitous&amp;#95;language&quot;&gt;&lt;/a&gt;Hang on, isn't this really about the ubiquitous language&lt;/h2&gt;&lt;p&gt;Yes, it is really. The main point is that the name you come up with has to be part of the ubiquitous language and therefore inherits all the benefits. In 6 months time you may not know &lt;i&gt;why&lt;/i&gt; those 6 different rules are applicable here. If you realise it is because they are relevant for a 'Highly interactive customer' then it all makes sense (where 'Highly interactive customer' is the abstraction).&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;parting&amp;#95;words&quot;&gt;&lt;/a&gt;Parting words&lt;/h2&gt;&lt;p&gt;In summary, an abstraction is not a programming construct, it is a thinking and communicating construct. It is a citizen of the ubiquitous domain whose only purpose is to clarify meaning. An ambiguous abstraction is dangerous.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 08 Nov 2016 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-10-16-cancelling-an-online-dot-net-server/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-10-16-cancelling-an-online-dot-net-server/
</link>
<title>
Cancelling an online.net server
</title>
<description>
&lt;p&gt;I have found &lt;a href='https://online.net'&gt;Online.net&lt;/a&gt; great in terms of provisioning time, capability of their UI, customer service etc.&lt;/p&gt;&lt;p&gt;&lt;i&gt;(I have also found some not-so-nice things: setup-costs, cannot use your own Windows license, unclear documentation on whether your server can access the RPN etc. but let's not spoil a nice day :-))&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Anyway, I needed to grab a server to dump my private &lt;a href='http://xenserver.org'&gt;XenServer&lt;/a&gt; (brilliant) cloud when I moved it from &lt;a href='http://ovh.co.uk'&gt;OVH&lt;/a&gt; (er, not so brilliant). Now the migration has finished I needed to cancel the server....ur...how? A web search has a number of reponses but most of them point to the old UI.&lt;/p&gt;&lt;p&gt;Turns out it ISN'T in any obvious place, you know, like next to your list of servers or on the server page itself, but is (cunningly :-() hidden away in your 'Billing' section.&lt;/p&gt;&lt;p&gt;So....logon to your console and click on the little down arrow next to your username in the top right:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/cancel-online-server/01-console.png&quot; alt=&quot;the console&quot; /&gt;&lt;/p&gt;&lt;p&gt;then click on the down arrow:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/cancel-online-server/02-click-on-name.png&quot; alt=&quot;the console&quot; /&gt;&lt;/p&gt;&lt;p&gt;click on 'Services' in the drop down:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/cancel-online-server/03-list-of-services.png&quot; alt=&quot;the console&quot; /&gt;&lt;/p&gt;&lt;p&gt;pick 'Details' next to the server in question:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/cancel-online-server/04-terminate-button.png&quot; alt=&quot;the console&quot; /&gt;&lt;/p&gt;&lt;p&gt;click on the 'Terminate' button:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/cancel-online-server/05-terminate-confirm.png&quot; alt=&quot;the console&quot; /&gt;&lt;/p&gt;&lt;p&gt;and provide a reason:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/cancel-online-server/06-termination-explanation.png&quot; alt=&quot;the console&quot; /&gt;&lt;/p&gt;&lt;p&gt;That's it.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 16 Oct 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-10-09-seafile-library-history/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-10-09-seafile-library-history/
</link>
<title>
Seafile history
</title>
<description>
&lt;p&gt;(&lt;i&gt;NOTE: updated to include images&lt;/i&gt;)&lt;/p&gt;&lt;p&gt;Another fly-by post.&lt;/p&gt;&lt;p&gt;&lt;a href='https://www.seafile.com/en/home/'&gt;Seafile&lt;/a&gt; has a really neat 'history' browser - on the web site you will see a little clock icon when viewing a library. If you click this you can navigate to a point-in-time and then either restore the entire library, a folder or a file from that snapshot.&lt;/p&gt;&lt;p&gt;For example, from the list of libraries:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/seafile-history/library-list.png&quot; alt=&quot;library list&quot; /&gt;&lt;/p&gt;&lt;p&gt;pick a library:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/seafile-history/in-library.png&quot; alt=&quot;a library&quot; /&gt;&lt;/p&gt;&lt;p&gt;click on the history icon:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/seafile-history/history-library.png&quot; alt=&quot;list of snapshots&quot; /&gt;&lt;/p&gt;&lt;p&gt;choose a snapshot:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/seafile-history/history-folder.png&quot; alt=&quot;folders in that snapshot&quot; /&gt;&lt;/p&gt;&lt;p&gt;navigate as you wish:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/seafile-history/history-nested-folder.png&quot; alt=&quot;nested folders&quot; /&gt;&lt;/p&gt;&lt;p&gt;then either restore or download the file:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/seafile-history/history-file.png&quot; alt=&quot;a file&quot; /&gt;&lt;/p&gt;&lt;p&gt;Neat huh - unfortunately it is only on the web, not the local sync client - I wonder if the client doesn't have all the required meta-data.&lt;/p&gt;&lt;p&gt;It is also blindingly quick.&lt;/p&gt;&lt;p&gt;I achieved a very similar thing at work using event-streams - the 'historical view' was literally just a fold over all events up to that point in time - but that is going to have to wait for another day :-).&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 09 Oct 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-10-07-Lost/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-10-07-Lost/
</link>
<title>
Lost
</title>
<description>
&lt;p&gt;Is it me? Am I getting old and grumpy? Well yes, I am, but that might not be cause.&lt;/p&gt;&lt;p&gt;I am watching Lost again, and I am struck again how brilliant it is: the cinematography; the acting; the perfect amount of quirkiness and consistency; the character development and so on.&lt;/p&gt;&lt;p&gt;And yet, whilst I am really appreciating watching it I can't help but feel a sense of loss (see what I did there?) that in a few short months I will have finished the series and there isn't anything I can watch that will match it.&lt;/p&gt;&lt;p&gt;I guess I could watch Serenity again. I could always force my way through BattleStar Galactica....nah, maybe not.&lt;/p&gt;&lt;p&gt;Anyways, gotta go, whats-her-name is about to take out whats-his-face, you know, the one she sat next to in the not-particularly-robust aero-plane :-).&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 07 Oct 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-10-06-just-checking-in/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-10-06-just-checking-in/
</link>
<title>
Been a while
</title>
<description>
&lt;p&gt;So.... how have you all been? It has been a worryingly long time since I last saw you all ;-)&lt;/p&gt;&lt;p&gt;Life seems to be doing all it can to stop me blogging, so this is 'fly by' blog post to keep me in rhythm.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://www.seafile.com'&gt;seafile&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://www.seafile.com'&gt;seafile&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Wow, this is rocking my world big time - it is great. Disappointed there isn't a 'one-way sync TO the server' as that would replace my use of &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;&lt;a href='https://www.plex.tv'&gt;plex&lt;/a&gt;&quot;&gt;&lt;/a&gt;&lt;a href='https://www.plex.tv'&gt;plex&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Where have you been all my life? Closely following seafile in 'things that make me smile', Plex is awesome for managing your media. Sort of :-) - CDs are a dream, rip them, and the magic of internet-accessible-tag-libraries will pull down cover art, organise them etc. &lt;/p&gt;&lt;p&gt;Doing the same for TV shows or DVDs....not so much. Rip a DVD to MKV format (google makemkv if you don't have a solution already) and it will produce a number of 'titleXX' files.&lt;/p&gt;&lt;p&gt;Import those into Plex (or any media file really) and all sorts of fun, insane and just wrong things will happen.&lt;/p&gt;&lt;p&gt;When you name the titles properly then again, it works like magic. Click on the file icon and you get a lovely full page view of the file, specials, extras etc. with full page cover art pulled from the internet.&lt;/p&gt;&lt;p&gt;I did this with my 'Lost' DVDs and when you click on one of them you get some lovely spooky music.&lt;/p&gt;&lt;p&gt;Very cool. But you have to work at it a bit.&lt;/p&gt;&lt;p&gt;And, if you have close to half a TB of (legally owned!) stuff, it can take a while to upload over Virgin's abysmally small upload speeds.&lt;/p&gt;&lt;p&gt;What else?....er...nope, that's it.&lt;/p&gt;&lt;p&gt;Oooh, actually, before you go - check out Plex's beta 'Cloud' &lt;a href='https://www.engadget.com/2016/09/26/plex-cloud-online-server/'&gt;offering&lt;/a&gt;. Can't wait for that to get out of beta.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 06 Oct 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-29-pydio-seafile/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-29-pydio-seafile/
</link>
<title>
Secure file sharing in the cloud
</title>
<description>
&lt;p&gt;We occasionally need to share sensitive files with our clients: new deployment bundles, test data etc. Due to the sensitive nature of our work we &lt;i&gt;must&lt;/i&gt; have the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;strong usernames/passwords&lt;/li&gt;&lt;li&gt;no client installation so a decent web UI is necessary&lt;/li&gt;&lt;li&gt;encryption in transit and at rest&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And as I will be administering it, it must also:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;be trivial to install and upgrade&lt;/li&gt;&lt;li&gt;not break when you upgrade the OS&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As this is an experiment I want to self-host (as that increases security somewhat) and all the hosted options I have looked at are either too expensive or too cumbersome.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;pydio&quot;&gt;&lt;/a&gt;Pydio&lt;/h2&gt;&lt;p&gt;For a while I used &lt;a href='https://pydio.com'&gt;pydio&lt;/a&gt; and it was fine. Installation was tricky (although it has gotten much better recently) but once it was working it was pretty solid.&lt;/p&gt;&lt;p&gt;It did the following very well:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a good Linux citizen, config files in the right places for the distribution&lt;/li&gt;&lt;li&gt;very rounded web UI&lt;/li&gt;&lt;li&gt;all the files are stored 'as-is' so last-resort backup is as simple as rsync&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The major downsides however:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;everything is stored under www-data and permissions are at the application level&lt;/li&gt;&lt;li&gt;upgrading Ubuntu to the latest LTS broke it horribly, probably because PHP changed significantly&lt;/li&gt;&lt;li&gt;sharing between clients never seemed to work properly so we had to copy the same release artifacts between accounts&lt;/li&gt;&lt;li&gt;the pydio admin would need to issue a username and password which the client never bothered to change&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;However, other than those issues (which are all well documented) pydio was fine for sharing via the web.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;seafile&quot;&gt;&lt;/a&gt;Seafile&lt;/h2&gt;&lt;p&gt;I noticed &lt;a href='https://www.seafile.com/en/home/'&gt;seafile&lt;/a&gt; when I was first evaluating solutions a while ago. It seemed more focused at file sharing/synchronising than cloud sharing so I dismissed it. However, it seems to have matured nicely and offers a lot out of the box:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;everything is a &lt;a href='https://www.seafile.com/en/help/libraries/'&gt;library&lt;/a&gt; which you can share with others&lt;/li&gt;&lt;li&gt;libraries can be &lt;a href='https://www.seafile.com/en/help/encrypted_libraries/'&gt;encrypted&lt;/a&gt; (although there are serious concerns over its encryption)&lt;/li&gt;&lt;li&gt;users were invited with an email and password which they were forced to change&lt;/li&gt;&lt;li&gt;uploads and downloads could be done with &lt;a href='https://www.seafile.com/en/help/share/'&gt;security-by-obfuscation&lt;/a&gt; URLs which could be password protected and expired&lt;/li&gt;&lt;li&gt;their &lt;a href='https://www.seafile.com/en/help/install/'&gt;desktop client&lt;/a&gt; allows you to sync locally or browse remotely on a library by library basis&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The installation was a peach, the simplest (backup) non-trivial software I have ever installed. It was literally get a fresh debian/ubuntu machine and then run the &lt;a href='https://github.com/seafile/seafile-server-installer'&gt;installation script.&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;After that it was a case of regenerating the SSL and installing it by editing (on debian at least) &lt;code&gt;/etc/nginx/conf.d/seafile.conf&lt;/code&gt; to point to the key and the crt:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;server {
  listen       80;
  server&amp;#95;name  &amp;quot;&amp;quot;;
  return 301 https://$http&amp;#95;host$request&amp;#95;uri;
}

server {
  listen 443;
  server&amp;#95;name  &amp;quot;&amp;quot;;

### START - THIS IS WHAT YOU NEED TO CHANGE ###
  ssl on;
  ssl&amp;#95;certificate /etc/ssl/certs/&amp;lt;YOUR-SERVER&amp;gt;&amp;#95;bundle.crt; # /etc/nginx/ssl/seafile.crt;
  ssl&amp;#95;certificate&amp;#95;key /etc/ssl/private/&amp;lt;YOUR-SERVER&amp;gt;.key; # /etc/nginx/ssl/seafile.key;
### END - THIS IS WHAT YOU NEED TO CHANGE ###

  proxy&amp;#95;set&amp;#95;header X-Forwarded-For $remote&amp;#95;addr;

  location / {
    fastcgi&amp;#95;pass    127.0.0.1:8000;
    fastcgi&amp;#95;param   SCRIPT&amp;#95;FILENAME     $document&amp;#95;root$fastcgi&amp;#95;script&amp;#95;name;
    fastcgi&amp;#95;param   PATH&amp;#95;INFO           $fastcgi&amp;#95;script&amp;#95;name;
    fastcgi&amp;#95;param   SERVER&amp;#95;PROTOCOL     $server&amp;#95;protocol;
    fastcgi&amp;#95;param   QUERY&amp;#95;STRING        $query&amp;#95;string;
    fastcgi&amp;#95;param   REQUEST&amp;#95;METHOD      $request&amp;#95;method;
    fastcgi&amp;#95;param   CONTENT&amp;#95;TYPE        $content&amp;#95;type;
    fastcgi&amp;#95;param   CONTENT&amp;#95;LENGTH      $content&amp;#95;length;
    fastcgi&amp;#95;param   SERVER&amp;#95;ADDR         $server&amp;#95;addr;
    fastcgi&amp;#95;param   SERVER&amp;#95;PORT         $server&amp;#95;port;
    fastcgi&amp;#95;param   SERVER&amp;#95;NAME         $server&amp;#95;name;
    fastcgi&amp;#95;param   REMOTE&amp;#95;ADDR         $remote&amp;#95;addr;
    fastcgi&amp;#95;param   HTTPS               on;
    fastcgi&amp;#95;param   HTTP&amp;#95;SCHEME         https;
    access&amp;#95;log      /var/log/nginx/seahub.access.log;
    error&amp;#95;log       /var/log/nginx/seahub.error.log;
  }

  location /seafhttp {
    rewrite &amp;#94;/seafhttp&amp;#40;.&amp;#42;&amp;#41;$ $1 break;
    proxy&amp;#95;pass http://127.0.0.1:8082;
    client&amp;#95;max&amp;#95;body&amp;#95;size 0;
    proxy&amp;#95;connect&amp;#95;timeout  36000s;
    proxy&amp;#95;read&amp;#95;timeout  36000s;
    proxy&amp;#95;send&amp;#95;timeout  36000s;
  }

  location /media {
    root /opt/seafile/seafile-server-latest/seahub;
  }

  location /seafdav {
    fastcgi&amp;#95;pass    127.0.0.1:8080;
    fastcgi&amp;#95;param   SCRIPT&amp;#95;FILENAME     $document&amp;#95;root$fastcgi&amp;#95;script&amp;#95;name;
    fastcgi&amp;#95;param   PATH&amp;#95;INFO           $fastcgi&amp;#95;script&amp;#95;name;
    fastcgi&amp;#95;param   SERVER&amp;#95;PROTOCOL     $server&amp;#95;protocol;
    fastcgi&amp;#95;param   QUERY&amp;#95;STRING        $query&amp;#95;string;
    fastcgi&amp;#95;param   REQUEST&amp;#95;METHOD      $request&amp;#95;method;
    fastcgi&amp;#95;param   CONTENT&amp;#95;TYPE        $content&amp;#95;type;
    fastcgi&amp;#95;param   CONTENT&amp;#95;LENGTH      $content&amp;#95;length;
    fastcgi&amp;#95;param   SERVER&amp;#95;ADDR         $server&amp;#95;addr;
    fastcgi&amp;#95;param   SERVER&amp;#95;PORT         $server&amp;#95;port;
    fastcgi&amp;#95;param   SERVER&amp;#95;NAME         $server&amp;#95;name;
    fastcgi&amp;#95;param   REMOTE&amp;#95;ADDR         $remote&amp;#95;addr;
    fastcgi&amp;#95;param   HTTPS               on;
    client&amp;#95;max&amp;#95;body&amp;#95;size 0;
    access&amp;#95;log      /var/log/nginx/seafdav.access.log;
    error&amp;#95;log       /var/log/nginx/seafdav.error.log;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We had to use the 'bundle' crt because godaddy's SSLs signing authority isn't always recognised so the crt is actually the result of:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;bash
cat &amp;lt;YOUR-SERVER&amp;gt;.crt gd&amp;#95;bundle.crt &amp;gt; &amp;lt;YOU-SERVER&amp;gt;&amp;#95;bundle.crt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a few days usage I am very impressed. The web UI isn't great but it all seems to be very solid and reliable.&lt;/p&gt;&lt;p&gt;And wow, does it sync quickly! It uses &lt;a href='https://en.wikipedia.org/wiki/DeltaSync'&gt;delta syncing&lt;/a&gt; but the initial upload was really quick as well.&lt;/p&gt;&lt;p&gt;It also has a huge feature, which is sorely missing in a lot of these cloud servers, which is you can browser a library from your desktop client without it syncing, so it isn't going to overwhelm the pitifully small SSDs most laptops come with these days.&lt;/p&gt;&lt;p&gt;So yes, all in all, very pleased with it.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 29 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-29-prismatic-schema/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-29-prismatic-schema/
</link>
<title>
Deprecated warnings from plumatic schema
</title>
<description>
&lt;p&gt;If you aren't already using &lt;a href='https://github.com/plumatic/schema'&gt;plumatic's schema&lt;/a&gt; then I &lt;strong&gt;strongly&lt;/strong&gt; recommend you do.&lt;/p&gt;&lt;p&gt;&lt;i&gt;(when did they stop being 'Prismatic' and become 'Plumatic'? Oh well)&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The reason why will have to be another blog post, this is simply to say that is you are using &lt;code&gt;both&lt;/code&gt; or &lt;code&gt;either&lt;/code&gt; then you will get a bunch of &lt;code&gt;deprecated&lt;/code&gt; warnings.&lt;/p&gt;&lt;p&gt;The simple, not really thinking about it solution is to use &lt;code&gt;constrained&lt;/code&gt; instead of &lt;code&gt;both&lt;/code&gt; and &lt;code&gt;conditional&lt;/code&gt; instead of &lt;code&gt;either&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Examples:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;s/both &amp;#91;s/Int&amp;#93; &amp;#40;s/pred seq&amp;#41;&amp;#41;
=&amp;gt;
&amp;#40;s/constrained seq &amp;#91;s/Int&amp;#93;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;and&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;def ToggleA {:toggle &amp;#40;s/eq :a&amp;#41; :value s/Int}&amp;#41;
&amp;#40;def ToggleB {:toggle &amp;#40;s/eq :b&amp;#41; :other-field s/Int}&amp;#41;
&amp;#40;s/either ToggleA ToggleB&amp;#41;
=&amp;gt;
&amp;#40;s/conditional #&amp;#40;= :a &amp;#40;:toggle %&amp;#41;&amp;#41; ToggleA #&amp;#40;= :b &amp;#40;:toggle %&amp;#41;&amp;#41; ToggleB&amp;#41;
=&amp;gt;
&amp;#40;s/conditional #&amp;#40;= :a &amp;#40;:toggle %&amp;#41;&amp;#41; ToggleA :else ToggleB&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hope that helps.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 29 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-29-circleci-phantomjs/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-29-circleci-phantomjs/
</link>
<title>
Circleci, phantomjs
</title>
<description>
&lt;p&gt;Another quick tip.&lt;/p&gt;&lt;p&gt;I use the excellent &lt;a href='https://github.com/emezeske/lein-cljsbuild'&gt;cljsbuild&lt;/a&gt; to compile and test our ClojureScript projects (and I can't believe how difficult it is to wire this stuff together in 2016!). To support continuous integration I use &lt;a href='http://phantomjs.org'&gt;phantomjs&lt;/a&gt; to provide the JavaScript environment.&lt;/p&gt;&lt;p&gt;Unfortunately circleci's environment doesn't have &lt;code&gt;phantomjs&lt;/code&gt; v2 available to it and v1 has some troubling properties. It turns out, after much googling and dead ends, that it is pretty trivial to get &lt;code&gt;phantomjs&lt;/code&gt; in your circleci environment, simply add:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;machine:
  pre:
    - sudo curl --output /usr/local/bin/phantomjs https://s3.amazonaws.com/circle-downloads/phantomjs-2.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to your &lt;code&gt;circle.yml&lt;/code&gt; - thanks &lt;a href='https://discuss.circleci.com/t/add-phantomjs-2-1-1-to-the-platform/1755/3'&gt;kimh@circleci&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;lein-cljsbuild&quot;&gt;&lt;/a&gt;lein-cljsbuild&lt;/h2&gt;&lt;p&gt;The documentation on &lt;a href='https://github.com/emezeske/lein-cljsbuild/blob/master/doc/TESTING.md'&gt;github&lt;/a&gt; is sufficient and the &lt;a href='https://github.com/emezeske/lein-cljsbuild/tree/master/example-projects/advanced'&gt;advanced project&lt;/a&gt; contains all you need.&lt;/p&gt;&lt;p&gt;However, in brief (and note, this isn't exactly the same as the advanced project):&lt;/p&gt;&lt;p&gt;&lt;code&gt;project.clj&lt;/code&gt;:&lt;pre&gt;&lt;code&gt;&amp;#40;defproject &amp;lt;YOUR-COMPANY&amp;gt;/&amp;lt;YOUR-COMPANY&amp;gt;.util &amp;quot;0.4.1-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url  &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies &amp;#91;&amp;#91;org.clojure/clojure &amp;quot;1.8.0&amp;quot;&amp;#93;
                 &amp;#91;org.clojure/clojurescript &amp;quot;1.9.216&amp;quot;&amp;#93;
                 &amp;#91;org.clojure/tools.logging &amp;quot;0.3.1&amp;quot;&amp;#93;
                 &amp;#91;ch.qos.logback/logback-classic &amp;quot;1.1.7&amp;quot;&amp;#93;
                 &amp;#91;net.sourceforge.jtds/jtds &amp;quot;1.3.1&amp;quot;&amp;#93;
                 &amp;#91;com.mchange/c3p0 &amp;quot;0.9.5.2&amp;quot;&amp;#93;
                 &amp;#91;environ &amp;quot;1.1.0&amp;quot;&amp;#93;
                 &amp;#91;com.lucasbradstreet/instaparse-cljs &amp;quot;1.4.1.2&amp;quot;&amp;#93;
                 &amp;#91;prismatic/schema &amp;quot;1.1.3&amp;quot;&amp;#93;
                 &amp;#91;org.clojure/java.jdbc &amp;quot;0.4.2&amp;quot;&amp;#93;
                 &amp;#91;clj-time &amp;quot;0.12.0&amp;quot;&amp;#93;
                 &amp;#91;com.andrewmcveigh/cljs-time &amp;quot;0.4.0&amp;quot;&amp;#93;&amp;#93;

  :plugins &amp;#91;&amp;#91;lein-environ &amp;quot;1.1.0&amp;quot;&amp;#93;
            &amp;#91;lein-wagon-ssh-external &amp;quot;0.1.0&amp;quot;&amp;#93;
            &amp;#91;lein-cljsbuild &amp;quot;1.1.4&amp;quot;&amp;#93;&amp;#93;

  :cljsbuild {:test-commands
              {&amp;quot;unit&amp;quot; &amp;#91;&amp;quot;phantomjs&amp;quot;
                       &amp;quot;phantom/unit-test.js&amp;quot;
                       &amp;quot;resources/private/html/unit-test.html&amp;quot;&amp;#93;}
              :builds {
                       :prod
                       {:source-paths &amp;#91;&amp;quot;src&amp;quot;&amp;#93;
                        :compiler     {:output-to     &amp;quot;resources/public/js/main.js&amp;quot;
                                       :optimizations :advanced
                                       :pretty-print  false}}
                       :test
                       {:source-paths &amp;#91;&amp;quot;src&amp;quot; &amp;quot;test&amp;quot; &amp;quot;test-cljs&amp;quot;&amp;#93;
                        :compiler     {:output-to     &amp;quot;resources/private/js/unit-test.js&amp;quot;
                                       :optimizations :advanced
                                       :pretty-print  false}}}}
  ; Clean JS directories
  :clean-targets &amp;#94;{:protect false} &amp;#91;&amp;quot;resources/private/js&amp;quot;
                                    &amp;quot;resources/public/js&amp;quot;
                                    :target-path&amp;#93;

  :aliases {&amp;quot;clj-tests!&amp;quot;           &amp;#91;&amp;quot;do&amp;quot; &amp;quot;test&amp;quot;&amp;#93;
            &amp;quot;cljs-tests!&amp;quot;          &amp;#91;&amp;quot;do&amp;quot; &amp;#91;&amp;quot;cljsbuild&amp;quot; &amp;quot;test&amp;quot;&amp;#93;&amp;#93;
            &amp;quot;all-tests!&amp;quot;           &amp;#91;&amp;quot;do&amp;quot; &amp;quot;clj-tests!,&amp;quot; &amp;quot;cljs-tests!&amp;quot;&amp;#93;
            &amp;quot;full-build-no-tests!&amp;quot; &amp;#91;&amp;quot;do&amp;quot; &amp;quot;clean&amp;quot;&amp;#93;
            &amp;quot;full-build-cljs!&amp;quot;     &amp;#91;&amp;quot;do&amp;quot; &amp;quot;clean,&amp;quot; &amp;quot;cljs-tests!&amp;quot;&amp;#93;
            &amp;quot;full-build!&amp;quot;          &amp;#91;&amp;quot;do&amp;quot; &amp;quot;clean,&amp;quot; &amp;quot;all-tests!&amp;quot;&amp;#93;
            ;; TODO - circleci cannot access a MS SQL database so run as many tests as we can
            &amp;quot;deploy!&amp;quot;              &amp;#91;&amp;quot;do&amp;quot; &amp;quot;full-build-cljs!&amp;quot;&amp;#93;}&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;phantom/unit-test.js&lt;/code&gt;:&lt;pre&gt;&lt;code&gt;var system = require&amp;#40;'system'&amp;#41;;
var url,args;

if &amp;#40;phantom.version.major &amp;gt; 1&amp;#41; {
    args = system.args;
    if &amp;#40;args.length &amp;lt; 2&amp;#41; {
        system.stderr.write&amp;#40;'Expected a target URL parameter.'&amp;#41;;
        phantom.exit&amp;#40;1&amp;#41;;
    }
    url = args&amp;#91;1&amp;#93;;
} else {
    args = phantom.args;
    if &amp;#40;args.length &amp;lt; 1&amp;#41; {
        system.stderr.write&amp;#40;'Expected a target URL parameter.'&amp;#41;;
        phantom.exit&amp;#40;1&amp;#41;;
    }
    url = args&amp;#91;0&amp;#93;;
}

var page = require&amp;#40;'webpage'&amp;#41;.create&amp;#40;&amp;#41;;

page.onConsoleMessage = function &amp;#40;message&amp;#41; {
    console.log&amp;#40;&amp;quot;Test console: &amp;quot; + message&amp;#41;;
};

console.log&amp;#40;&amp;quot;Loading URL: &amp;quot; + url&amp;#41;;

page.open&amp;#40;url, function &amp;#40;status&amp;#41; {
    if &amp;#40;status !== &amp;quot;success&amp;quot;&amp;#41; {
        console.log&amp;#40;'Failed to open ' + url&amp;#41;;
        setTimeout&amp;#40;function&amp;#40;&amp;#41; { // https://github.com/ariya/phantomjs/issues/12697
            phantom.exit&amp;#40;1&amp;#41;;
        }, 0&amp;#41;;
    }

    page.evaluate&amp;#40;function&amp;#40;&amp;#41; {
        &amp;lt;YOUR-COMPANY&amp;gt;.util.test.run&amp;#40;&amp;#41;;
    }&amp;#41;;

    setTimeout&amp;#40;function&amp;#40;&amp;#41; { // https://github.com/ariya/phantomjs/issues/12697
        phantom.exit&amp;#40;0&amp;#41;;
    }, 0&amp;#41;;
}&amp;#41;;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;test-cljs/&amp;lt;YOUR-COMPANY&amp;gt;.util.test&lt;/code&gt;:&lt;pre&gt;&lt;code&gt;&amp;#40;ns &amp;lt;YOUR-COMPANY&amp;gt;.util.test
  &amp;#40;:require &amp;#91;clojure.test :as t&amp;#93;
            &amp;#91;&amp;lt;YOUR-COMPANY&amp;gt;.util.common-test&amp;#93;
            &amp;#91;&amp;lt;YOUR-COMPANY&amp;gt;.util.hierarchy-test&amp;#93;
            &amp;#91;&amp;lt;YOUR-COMPANY&amp;gt;.util.parser.time-test&amp;#93;&amp;#41;&amp;#41;

&amp;#40;enable-console-print!&amp;#41;

&amp;#40;defn &amp;#94;:export run &amp;#91;&amp;#93;
  &amp;#40;.log js/console &amp;quot;Testing &amp;lt;YOUR-COMPANY&amp;gt;.util&amp;quot;&amp;#41;
  &amp;#40;t/run-all-tests #&amp;quot;&amp;lt;YOUR-COMPANY&amp;gt;.util.&amp;#42;-test&amp;quot;&amp;#41;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 29 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-28-projectile-killing/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-28-projectile-killing/
</link>
<title>
Killing a projectile project
</title>
<description>
&lt;p&gt;&lt;a href='https://github.com/bbatsov/projectile'&gt;Projectile&lt;/a&gt; is an excellent library for managing 'projects' (where a project is typically a git repository).&lt;/p&gt;&lt;p&gt;Today I found a new tip - &lt;code&gt;projectile-kill-buffers&lt;/code&gt; which effectively removes the project from your current emacs session:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;man&quot;&gt;projectile-kill-buffers is an interactive autoloaded compiled Lisp function in
‘projectile.el’.

It is bound to SPC p k, M-m p k, C-c p k, &amp;lt;menu-bar&amp;gt; &amp;lt;tools&amp;gt; &amp;lt;Projectile&amp;gt; &amp;lt;Kill
project buffers&amp;gt;.

&amp;#40;projectile-kill-buffers&amp;#41;

Kill all project buffers.

&amp;#91;back&amp;#93;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is really useful if you are toggling between multiple projects and want to finish working on one of the projects. Simply visit a buffer with a file in that project and &lt;code&gt;SPC p k&lt;/code&gt;, confirm and all of the buffers related to that project disappear.&lt;/p&gt;&lt;p&gt;NOTE: it doesn't actually remove the project from emacs's session as you can still &lt;code&gt;SPC p p&lt;/code&gt; (&lt;code&gt;helm-projectile-switch-project&lt;/code&gt;) to the project.&lt;/p&gt;&lt;p&gt;That's all for now folks.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 28 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-28-git-tagging-project/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-28-git-tagging-project/
</link>
<title>
Git tagging your builds automatically
</title>
<description>
&lt;p&gt;I need to write a much longer post to explain my thoughts on 'versioning' and what constitutes a release with today's trends of continuous integration, but for now, a simple tip.&lt;/p&gt;&lt;p&gt;I wanted a way to distinguish each &lt;i&gt;build&lt;/i&gt;, not each &lt;i&gt;release&lt;/i&gt; but each &lt;i&gt;build&lt;/i&gt;. There is one excellent source of truth for that which is your git repository.&lt;/p&gt;&lt;p&gt;Wouldn't it be great if each build contained a full git log of what went into it?.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;the&amp;#95;magic&quot;&gt;&lt;/a&gt;The magic&lt;/h2&gt;&lt;p&gt;We use &lt;a href='circleci.com'&gt;circleci&lt;/a&gt; (but it would be trivial to do with any decent continuous integration server) and before building we simply execute &lt;code&gt;git log &amp;ndash;oneline &amp;ndash;decorate &amp;ndash;graph &amp;gt; resources/public/glog.txt&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;machine:
  java:
    version: oraclejdk8

## Customize dependencies
dependencies:
  cache&amp;#95;directories:
    - &amp;quot;&amp;#126;/.m2&amp;quot;
  pre:
    - git fetch --tags

test:
  override:
    - git log --oneline --decorate --graph &amp;gt; resources/public/glog.txt
    - lein full-build-no-tests!
    - mkdir -p $CIRCLE&amp;#95;TEST&amp;#95;REPORTS/junit/
    - find . -type f -regex &amp;quot;.&amp;#42;/target/test-reports/.&amp;#42;xml&amp;quot; -exec cp {} $CIRCLE&amp;#95;TEST&amp;#95;REPORTS/junit/ \;
    - cp target/&amp;#42;.war $CIRCLE&amp;#95;ARTIFACTS

# this doesn't work so commented out
# in favour of an explicit `cp` in the test: post: stage
#general:
#  artifacts:
#    - &amp;quot;target/&amp;#42;.war&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i&gt;(&lt;code&gt;resources\public&lt;/code&gt; is exposed from the root of the &lt;code&gt;lein war&lt;/code&gt; &lt;code&gt;WAR&lt;/code&gt; file)&lt;/i&gt;&lt;/p&gt;&lt;p&gt;This is of course only one way of doing it, but it was the 'Simplest Thing That Can Possibly Work'. And sure, it corrupts the working directory because &lt;code&gt;resources\public&lt;/code&gt; is under git version control, but it doesn't matter because &lt;code&gt;circleci&lt;/code&gt; containers are disregarded after every build.&lt;/p&gt;&lt;p&gt;That's all for now - why not enjoy some &lt;a href='https://www.youtube.com/watch?v=RUX2-N8cVMc'&gt;light entertainment :-)&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 28 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-27-lessons-learned/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-27-lessons-learned/
</link>
<title>
Lessons learned from Java and Clojure
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;a&amp;#95;hard&amp;#95;day&quot;&gt;&lt;/a&gt;A hard day&lt;/h2&gt;&lt;p&gt;I learned the following lessons today:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Simplest is best&lt;/li&gt;&lt;li&gt;Evaluate your assumptions&lt;/li&gt;&lt;li&gt;Sometimes development is just &lt;i&gt;hard&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In a nutshell, our production app records UI errors and submits them to the server where they are pushed to the &lt;code&gt;error-handler&lt;/code&gt;. Similarly, if an Exception is raised server side it is also pushed to the &lt;code&gt;error-handler&lt;/code&gt;. However, the errors that had been captured were all ridiculously long stack traces with no references to any of my code.&lt;/p&gt;&lt;p&gt;It was clear that rendering (either printing out or serialising to EDN) was causing something to blow its stack, however the call-site just wasn't there!&lt;/p&gt;&lt;p&gt;The top of the stack trace:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;java.lang.StackOverflowError: null
 at java.util.regex.Pattern$GroupHead.match&amp;#40;Pattern.java:4658&amp;#41;
 at java.util.regex.Pattern$Branch.match&amp;#40;Pattern.java:4604&amp;#41;
 at java.util.regex.Pattern$Branch.match&amp;#40;Pattern.java:4602&amp;#41;
 at java.util.regex.Pattern$BranchConn.match&amp;#40;Pattern.java:4568&amp;#41;
 at java.util.regex.Pattern$GroupTail.match&amp;#40;Pattern.java:4717&amp;#41;
 at java.util.regex.Pattern$Curly.match0&amp;#40;Pattern.java:4279&amp;#41;
 at java.util.regex.Pattern$Curly.match&amp;#40;Pattern.java:4234&amp;#41;
 at java.util.regex.Pattern$GroupHead.match&amp;#40;Pattern.java:4658&amp;#41;
 at java.util.regex.Pattern$Branch.match&amp;#40;Pattern.java:4604&amp;#41;
 at java.util.regex.Pattern$Branch.match&amp;#40;Pattern.java:4602&amp;#41;
 at java.util.regex.Pattern$BmpCharProperty.match&amp;#40;Pattern.java:3798&amp;#41;
 at java.util.regex.Pattern$Start.match&amp;#40;Pattern.java:3461&amp;#41;
 at java.util.regex.Matcher.search&amp;#40;Matcher.java:1248&amp;#41;
 at java.util.regex.Matcher.find&amp;#40;Matcher.java:664&amp;#41;
 at java.util.Formatter.parse&amp;#40;Formatter.java:2549&amp;#41;
 at java.util.Formatter.format&amp;#40;Formatter.java:2501&amp;#41;
 at java.util.Formatter.format&amp;#40;Formatter.java:2455&amp;#41;
 at java.lang.String.format&amp;#40;String.java:2940&amp;#41;
 at clojure.core$format.invokeStatic&amp;#40;core.clj:5533&amp;#41;
 at clojure.core$print&amp;#95;tagged&amp;#95;object.invokeStatic&amp;#40;core&amp;#95;print.clj:106&amp;#41;
 at clojure.core$print&amp;#95;object.invokeStatic&amp;#40;core&amp;#95;print.clj:110&amp;#41;
 at clojure.core$fn&amp;#95;&amp;#95;6044.invokeStatic&amp;#40;core&amp;#95;print.clj:113&amp;#41;
 at clojure.core$fn&amp;#95;&amp;#95;6044.invoke&amp;#40;core&amp;#95;print.clj:113&amp;#41;
 at clojure.lang.MultiFn.invoke&amp;#40;MultiFn.java:233&amp;#41;
 at clojure.core$pr&amp;#95;on.invokeStatic&amp;#40;core.clj:3572&amp;#41;
 at clojure.core$pr&amp;#95;on.invoke&amp;#40;core.clj:3566&amp;#41;
 at clojure.core$print&amp;#95;map$fn&amp;#95;&amp;#95;6094.invoke&amp;#40;core&amp;#95;print.clj:212&amp;#41;
 at clojure.core$print&amp;#95;sequential.invokeStatic&amp;#40;core&amp;#95;print.clj:59&amp;#41;
 at clojure.core$print&amp;#95;map.invokeStatic&amp;#40;core&amp;#95;print.clj:208&amp;#41;
 at clojure.core$fn&amp;#95;&amp;#95;6097.invokeStatic&amp;#40;core&amp;#95;print.clj:217&amp;#41;
 at clojure.core$fn&amp;#95;&amp;#95;6097.invoke&amp;#40;core&amp;#95;print.clj:217&amp;#41;
 at clojure.lang.MultiFn.invoke&amp;#40;MultiFn.java:233&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(&lt;i&gt;spot the repetition?&lt;/i&gt;)&lt;/p&gt;&lt;p&gt;The bottom of the stack trace:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; at clojure.core$pr.invoke&amp;#40;core.clj:3575&amp;#41;
 at clojure.lang.AFn.applyToHelper&amp;#40;AFn.java:154&amp;#41;
 at clojure.lang.RestFn.applyTo&amp;#40;RestFn.java:132&amp;#41;
 at clojure.core$apply.invokeStatic&amp;#40;core.clj:646&amp;#41;
 at clojure.core$pr&amp;#95;str.invokeStatic&amp;#40;core.clj:4580&amp;#41;
 at clojure.core$pr&amp;#95;str.doInvoke&amp;#40;core.clj:4580&amp;#41;
 at clojure.lang.RestFn.invoke&amp;#40;RestFn.java:408&amp;#41;
 at cider.nrepl.print&amp;#95;method$eval53163$fn&amp;#95;&amp;#95;53164.invoke&amp;#40;print&amp;#95;method.clj:35&amp;#41;
 at clojure.lang.MultiFn.invoke&amp;#40;MultiFn.java:233&amp;#41;
 at
...
&lt;/code&gt;&lt;/pre&gt;NOTE: that ellipsis is actually in the stack trace itself, which is a big clue that it isn't complete.&lt;p&gt;Like all good engineers, after some navel gazing and talking to the duck I decided to call for &lt;a href='https://groups.google.com/d/topic/clojure/H4s5a6enftA/discussion'&gt;help&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The great part was that I couldn't reproduce it locally....except I remember in the dim and distant past I saw a very similar stack trace when deploying the application with &lt;code&gt;DEBUG&lt;/code&gt; logging. I recall that it was wrapped up with the excellent &lt;a href='https://github.com/stuartsierra/component'&gt;component&lt;/a&gt; library, specifically during instantiation.&lt;/p&gt;&lt;p&gt;So, two different effects, onto the cause...&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;a&amp;#95;minor&amp;#95;diversion&quot;&gt;&lt;/a&gt;A minor diversion&lt;/h3&gt;&lt;p&gt;I had been meaning to rethink the &lt;code&gt;component&lt;/code&gt; library due to two major pain-points:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;if a component crashes then it typically kills your system so a &lt;code&gt;&amp;#40;reset&amp;#41;&lt;/code&gt; is necessary&lt;/li&gt;&lt;li&gt;sometimes &lt;code&gt;&amp;#40;reset&amp;#41;&lt;/code&gt; doesn't work, particularly if you have &lt;code&gt;protocols&lt;/code&gt; hanging around&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And a third minor point - I felt that the component library wasn't great when you had sub-systems. Ideally I would want to include my sub-system component (map) into an outer map but there was no support for nesting. The best you could do was lexical scoping, e.g. &lt;code&gt;{:inner/a ....}&lt;/code&gt; which would be referenced by the outer system map.&lt;/p&gt;&lt;p&gt;And for completeness, I didn't actually have that much state but I did have an awful lot of &lt;code&gt;services&lt;/code&gt;, each of which was defined as a record.&lt;/p&gt;&lt;p&gt;Ultimately, I decided that a simply &lt;code&gt;start&lt;/code&gt; method which explicitly started the system in the correct order was sufficient.&lt;/p&gt;&lt;p&gt;A few hours hackery later and there was no sign of the &lt;code&gt;component&lt;/code&gt; library, and instead of 100s of lines of boilerplate spread out of a number of &lt;code&gt;.system.clj&lt;/code&gt; files I had a single &lt;code&gt;system.clj&lt;/code&gt; file complete with type safe dependency injection.&lt;/p&gt;&lt;p&gt;I was very pleasantly surprised at how much complexity it removed - the most dangerous sort of complexity that sneaks in sideways so it never feels painful at any one time, but looking at the system as a whole you realise how much complexity there is.&lt;/p&gt;&lt;p&gt;Oh, and &lt;code&gt;&amp;#40;reset&amp;#41;&lt;/code&gt; works fine now and if one of the services fails then no-worries, it all just works :-).&lt;/p&gt;&lt;p&gt;Anyway, back to the cause of the humongous stack trace.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;stack&amp;#95;traces&quot;&gt;&lt;/a&gt;Stack traces&lt;/h2&gt;&lt;p&gt;At first I was stumped as to what could be causing it. Thanks to two very friendly fellow Clojure devs I realised that actually what I was seeing was an incomplete picture, specifically I wasn't seeing the entire &lt;i&gt;depth&lt;/i&gt; of the tree (thanks Ragnar Dahlen).&lt;/p&gt;&lt;p&gt;And indeed, Java has a &lt;code&gt;MaxJavaStackTraceDepth&lt;/code&gt; property which dictates how many stack frames to include in a stack trace and is set to 1024 by default.&lt;/p&gt;&lt;p&gt;Unfortunately setting this to a larger value, or actually &lt;code&gt;-1&lt;/code&gt; which disables the threshold didn't make any difference. Mainly because I couldn't reproduce it in the first place! But even if it did I wouldn't have been satisfied - it was simply pushing the problem further away, not removing it.&lt;/p&gt;&lt;p&gt;Thinking it through a bit more I realised that the &lt;code&gt;error-handler&lt;/code&gt; serialises the entire state of the system and reports that alongside the error. Now, this &lt;i&gt;should&lt;/i&gt; be safe to do so as there is very little cached on the server. However, the UI &lt;code&gt;error-handler&lt;/code&gt; pushes its state to the server, and the UI state can be potentially huge...&lt;/p&gt;&lt;p&gt;So, a similar stack trace when serialising huge data structures in the &lt;code&gt;error-handler&lt;/code&gt; and a huge stack trace when starting the &lt;code&gt;component system&lt;/code&gt;. I see a theme....&lt;/p&gt;&lt;p&gt;And yep, tracing through the (now discarded) &lt;code&gt;component tree&lt;/code&gt; I could see that in &lt;code&gt;DEBUG&lt;/code&gt; mode I am mindlessly printing out something that could be unbounded.&lt;/p&gt;&lt;p&gt;The actual part of the code, if you are still reading :-), was in the &lt;code&gt;message handler&lt;/code&gt; which contains a list of 'message handlers.' The &lt;code&gt;message handler&lt;/code&gt; expects the handlers to be:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defprotocol IHandleMessages
  &amp;#40;id &amp;#91;this&amp;#93;&amp;#41;
  &amp;#40;can-handle? &amp;#91;this message&amp;#93;&amp;#41;
  &amp;#40;handle-message &amp;#91;this message opts&amp;#93;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and when a &lt;code&gt;handler&lt;/code&gt; was registered the &lt;code&gt;message handler&lt;/code&gt; would &lt;code&gt;DEBUG&lt;/code&gt; the &lt;code&gt;handler&lt;/code&gt;. Changing that &lt;code&gt;DEBUG&lt;/code&gt; to &lt;code&gt;&amp;#40;api/id handler&amp;#41;&lt;/code&gt; should be sufficient.&lt;/p&gt;&lt;p&gt;Again though, without being able to reproduce this it was all just a best-guess.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;on&amp;#95;a&amp;#95;better&amp;#95;note&quot;&gt;&lt;/a&gt;On a better note&lt;/h2&gt;&lt;p&gt;&lt;a href='http://spacemacs.org'&gt;Spacemacs'&lt;/a&gt; ability to convert the result of a &lt;code&gt;helm grep&lt;/code&gt; into an editable buffer which you can then edit made removing the many &lt;code&gt;&amp;#91;com.stuartsierra.component :as component&amp;#93;&lt;/code&gt; trivial :-). Gotta love spacemacs and &lt;a href='https://tuhdo.github.io/helm-intro.html'&gt;helm&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Oh, and &lt;a href='https://cursive-ide.com'&gt;Cursive&lt;/a&gt;'s excellent 'unused' code detection is worth its weight in gold.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;So what have I learnt?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;sometimes you don't need to follow the herd, and even simple libraries can cause incidental complexity&lt;/li&gt;&lt;li&gt;if you are seeing a nonsensical stack trace then no, Clojure isn't stupid, something else is getting involved&lt;/li&gt;&lt;li&gt;not being able to reproduce a problem in production is terrifying&lt;/li&gt;&lt;li&gt;consider whether your collaborator can be unbounded before mindlessly rendering it to the console or EDN&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I wonder what joys tomorrow will bring...&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 27 Sep 2016 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://colinyates.co.uk/posts-output/2016-09-25-hello-again/
</guid>
<link>
http://colinyates.co.uk/posts-output/2016-09-25-hello-again/
</link>
<title>
Blogging, the sequel!
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;a&amp;#95;fresh&amp;#95;start&quot;&gt;&lt;/a&gt;A fresh start&lt;/h2&gt;&lt;p&gt;So, er yeah. I haven't really blogged for a &lt;i&gt;long&lt;/i&gt; time - this time it will be different. I promise.&lt;/p&gt;&lt;p&gt;Hmm, I am already sceptical. It is well known that 'trying harder' never works, so what is different this time? Well, I have some objectives which are &lt;a href='https://en.wikipedia.org/wiki/SMART_criteria'&gt;SMART&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;pecific&lt;/li&gt;&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;easurable&lt;/li&gt;&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;greed upon&lt;/li&gt;&lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;ealistic&lt;/li&gt;&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;ime-based&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In a democracy of 1 it is pretty easy to meet the 'Agreed upon' criteria. So, what is my goal? To publish one 'meaty' blog post a week. By 'meaty' I mean a reaction to some non-trivial event in real life, probably work related.&lt;/p&gt;&lt;p&gt;What sorts of things will I ramble on about? Primarily technical I think, specifically around the Functional Programming and Enterprise landscape.&lt;/p&gt;&lt;p&gt;I care very passionately about Software Engineering and critical thinking as oppose to doing it &lt;code&gt;because Google&lt;/code&gt;. That will almost certainly creep in throughout the blog.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;jekyll,&amp;#95;so&amp;#95;long&quot;&gt;&lt;/a&gt;Jekyll, so long&lt;/h2&gt;&lt;p&gt;My previous blog was built using the excellent &lt;a href='https://jekyllrb.com'&gt;jekyll&lt;/a&gt;. The handful of posts can be found &lt;a href='https://github.com/yatesco/yatesco.github.io'&gt;on github&lt;/a&gt;. I fully intended to use it, but having upgraded to MacOS Sierra, installing jekyll was an exercise in pain.&lt;/p&gt;&lt;p&gt;&lt;code&gt;jekyll&lt;/code&gt; itself had moved to using &lt;code&gt;bundler&lt;/code&gt; which I don't object to at all. The thing I &lt;i&gt;do&lt;/i&gt; object to though is a gazillion &lt;code&gt;gem install&lt;/code&gt;s, failing on the somewhat infamous &lt;a href='http://www.nokogiri.org/tutorials/installing_nokogiri.html'&gt;Nokogiri&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Their &lt;a href='https://github.com/sparklemotion/nokogiri'&gt;GitHub&lt;/a&gt; issues list contains a number of helpful pointers when using &lt;code&gt;brew&lt;/code&gt;, but unfortunately I am using &lt;a href='https://www.macports.org'&gt;macports&lt;/a&gt; and after 3 hours or so of trying different incantations I gave up.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;cryogen&quot;&gt;&lt;/a&gt;Cryogen&lt;/h2&gt;&lt;p&gt;I had noticed &lt;a href='http://cryogenweb.org'&gt;Cryogen&lt;/a&gt; before but &lt;code&gt;jekyll&lt;/code&gt; was sufficient at the time, now I thought it deserved another look. And I am glad I did. Features?:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;tags&lt;/li&gt;&lt;li&gt;feeds&lt;/li&gt;&lt;li&gt;markdown (or that funny AsciiDoc ;-)&lt;/li&gt;&lt;li&gt;ridiculously trivial &lt;code&gt;disqus&lt;/code&gt; &lt;a href='http://cryogenweb.org/docs/configuration.html'&gt;integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Clojure (which I use full time at work)&lt;/li&gt;&lt;li&gt;lein&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Some not-so-great bits:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;the site is generated (following convention) in &lt;code&gt;resources\public&lt;/code&gt; so actually deploying the site requires an extra step or two. The solution can be as simple as having one git repo for the source and one for &lt;code&gt;resources\public&lt;/code&gt; which &lt;code&gt;GitHub Pages&lt;/code&gt; then serves.&lt;/li&gt;&lt;li&gt;the web site is generated automatically but you still need to refresh the web browser. I might investigate the most excellent &lt;a href='https://github.com/bhauman/lein-figwheel'&gt;figwheel&lt;/a&gt; to see if that can be integrated&lt;/li&gt;&lt;li&gt;it doesn't support &lt;code&gt;org-mode&lt;/code&gt;. I can hardly hold it to account for that, and given &lt;code&gt;org-mode&lt;/code&gt;'s excellent export modes it should be trivial to sort it out.&lt;/li&gt;&lt;li&gt;the default theme means &lt;code&gt;literal&lt;/code&gt; and &lt;a href='https://www.google.co.uk/search?q=happy+cat&amp;client=safari&amp;rls=en&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ved=0ahUKEwj&amp;ndash;dfIpKvPAhXqDcAKHY01BaAQsAQIHQ&amp;biw=1324&amp;bih=902'&gt;links&lt;/a&gt; aren't easily distinguished.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;An alternative to GitHub Pages is to host your own static server and &lt;code&gt;rsync&lt;/code&gt; it across, which is what I am doing.&lt;/p&gt;&lt;p&gt;Actually, because my &lt;code&gt;yak shaver&lt;/code&gt; was feeling particularly sharp I decided to use &lt;a href='https://circleci.com'&gt;circleci&lt;/a&gt; to deploy it which was as &lt;a href='https://github.com/yatesco/blog-cryogen/blob/master/circle.yml'&gt;trivial&lt;/a&gt; as:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;deployment:
  push&amp;#95;to&amp;#95;server:
    branch: master
    commands:
      - rsync -avz resources/public/ coliny@colinyates.co.uk:html/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i&gt;make sure to create a new key pair for your remote server, &lt;code&gt;ssh-copy-id&lt;/code&gt; to your remote server and then add the private key to your &lt;code&gt;circleci&lt;/code&gt; project&lt;/i&gt;&lt;/p&gt;&lt;p&gt;As the ever-growing engineer I notice a few upgrades to my process:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;rather than commit the entire &lt;code&gt;resources\public&lt;/code&gt; I could just commit the &lt;code&gt;resources\templates&lt;/code&gt; directory and have &lt;code&gt;circleci&lt;/code&gt; run &lt;code&gt;lein run&lt;/code&gt; before deployment&lt;/li&gt;&lt;li&gt;having the &lt;code&gt;rsync&lt;/code&gt; call in &lt;code&gt;circle.yml&lt;/code&gt; feels a bit yucky. Better to have a commited script which &lt;code&gt;circleci&lt;/code&gt; calls.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Anyways, it was relatively harmless and the blog is off to a flying start.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;the&amp;#95;future!&quot;&gt;&lt;/a&gt;The Future!&lt;/h3&gt;&lt;p&gt;Watch this space ;-).&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sun, 25 Sep 2016 00:00:00 +0100
</pubDate>
</item>
</channel>
</rss>
